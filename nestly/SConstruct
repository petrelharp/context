#!/usr/bin/env scons
# -*- coding: utf-8 -*-

'''
SCons file for driving nestly to create a hierachy of directories
and control files that can explore various model inference settings.

Based on:
https://github.com/fhcrc/nestly/blob/master/examples/scons/SConstruct
https://github.com/cswarth/hiv-sim/blob/master/sims/SConstruct
'''

import os
from os.path import join

from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command

# The following pulls in environment variables from your setup. I had to do it
# in order to have pandoc work through RMarkdown. Eventually I would like to
# get rid of it for portability.
environ = os.environ.copy()
env = Environment(ENV=environ)

# These "base" values will be available to all of our nests, but don't have any
# levels in the directory hierarchy associated with them.
base = {'n_sites': 10000,
        'time': 0.1,
        'seed' : 0
        }

# Passing an argument to `alias_environment` allows building targets based on
# nest key. For example, the `sim` files described below can be built by
# invoking `scons sim`.
nest = SConsWrap(Nest(base_dict=base), '_build', alias_environment=env)

# Add our aggregate targets, initializing collections that will get populated
# downstream. At the end of the pipeline, we will operate on these collections.
# The `add_argument` takes a key which will be the key used for accessing the
# collection. The `list` argument specifies that the collection will be a list.
# nest.add_aggregate('count_agg', list)
# nest.add_aggregate('cut_agg', list)

# Add a nest level with the name 'input_file' that takes the files in the
# inputs directory as its nestable list. Make its label function just the
# basename.
nest.add('model', [join('models', f) for f in os.listdir('models')],
         label_func=os.path.basename)

# This nest level determines the column range we will cut out of the file.
nest.add('longwin', [3])
nest.add('shortwin', [1])
nest.add('leftwin', [1])


@nest.add_target()
def sim(outdir, c):
    sim, = Command(join(outdir, 'sim.RData'),  # TARGET
                   ['../sim-seq.R', c['model']],  # SOURCES
                   'Rscript ${{SOURCES[0]}} \
                   --seed {0[seed]} \
                   -c ${{SOURCES[1]}} \
                   -t {0[time]} \
                   -s {0[n_sites]} \
                   -o $TARGET'.format(c))
    return sim


@nest.add_target()
def counts(outdir, c):
    counts, = Command(join(outdir, 'counts.tsv'),
                      ['../count-seq.R', c['sim']],
                      'Rscript ${{SOURCES[0]}} \
                      -i ${{SOURCES[1]}} \
                      -w {0[longwin]} \
                      -s {0[shortwin]} \
                      -l {0[leftwin]} \
                      -o $TARGET'.format(c))
    return counts


# NOTE: Eventually re-evaluate use of meanboundary.
@nest.add_target()
def genmat(outdir, c):
    genmat, = Command(join(outdir, 'genmat.RData'),
                      ['../make-genmat.R', c['model']],
                      'Rscript ${{SOURCES[0]}} \
                      -c ${{SOURCES[1]}} \
                      -w {0[longwin]} \
                      -o $TARGET'.format(c))
    return genmat


@nest.add_target()
def fit(outdir, c):
    fit, = Command(join(outdir, 'fit.RData'),
                   ['../fit-model.R', c['counts'], c['genmat']],
                   'Rscript ${{SOURCES[0]}} \
                   -i ${{SOURCES[1]}} \
                   -l {0[leftwin]} \
                   -m ${{SOURCES[2]}} \
                   -o $TARGET'.format(c))
    return fit


# Here I use `add_target_with_env` so that it knows about my path (leading to a
# recent pandoc).
@nest.add_target_with_env(env)
def report(env, outdir, c):
    report, = env.Command(join(outdir, 'fit.html'),
                          ['../templated-Rmd.sh', '../generic.Rmd', c['fit']],
                          '${SOURCES[0]} \
                          ${SOURCES[1]} \
                          ${SOURCES[2]}')
    return report
