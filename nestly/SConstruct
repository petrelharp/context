#!/usr/bin/env scons
# -*- coding: utf-8 -*-

'''
SCons file for driving nestly to create a hierachy of directories
and control files that can explore various model inference settings.

Based on:
https://github.com/fhcrc/nestly/blob/master/examples/scons/SConstruct
https://github.com/cswarth/hiv-sim/blob/master/sims/SConstruct
'''

import os
from os.path import join

from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, COMMAND_LINE_TARGETS

# The following pulls in environment variables from your setup. I had to do it
# in order to have pandoc work through RMarkdown. Eventually I would like to
# get rid of it for portability.
environ = os.environ.copy()
env = Environment(ENV=environ)

# *** The various types of simulations:


# A simple example simulation.
def _simple_sim():
    name = 'simple'

    # These "base" values will be available to all of our nests, but don't have
    # any levels in the directory hierarchy associated with them.
    base = {'n_sites': 10000,
            'time': 0.1,
            'seed': 0
            }

    # Passing an argument to `alias_environment` allows building targets based
    # on nest key. For example, the `sim` files described below can be built by
    # invoking `scons sim`.
    nest = SConsWrap(Nest(base_dict=base), '_'+name, alias_environment=env)

    # Add our aggregate targets, initializing collections that will get
    # populated downstream. At the end of the pipeline, we will operate on
    # these collections. The `add_argument` takes a key which will be the key
    # used for accessing the collection. The `list` argument specifies that the
    # collection will be a list.
    # nest.add_aggregate('count_agg', list)
    # nest.add_aggregate('cut_agg', list)

    # Add a nest level with the name 'input_file' that takes the files in the
    # inputs directory as its nestable list. Make its label function just the
    # basename.
    nest.add('model', [join('models', f) for f in os.listdir('models')],
             label_func=os.path.basename)

    nest.add('wintriple', [(3, 1, 1)],
             label_func=lambda t: "_".join(str(n) for n in t))
    return nest

cl_targets = {'simple': _simple_sim
              }


# *** Processing command line input:
if not len(COMMAND_LINE_TARGETS) == 1:
    error_str = "Please give exactly one of "+str(cl_targets.keys())
    raise RuntimeError(error_str)

target_str, = COMMAND_LINE_TARGETS
nest = cl_targets[target_str]()

for target_name in cl_targets.keys():
    env.Alias(target_name, '_'+target_name)


# *** Our lovely targets:
@nest.add_target()
def sim(outdir, c):
    sim, = Command(join(outdir, 'sim.RData'),  # TARGET
                   ['../sim-seq.R', c['model']],  # SOURCES
                   'Rscript ${{SOURCES[0]}} \
                   --seed {0[seed]} \
                   -c ${{SOURCES[1]}} \
                   -t {0[time]} \
                   -s {0[n_sites]} \
                   -o $TARGET'.format(c))
    return sim


@nest.add_target()
def counts(outdir, c):
    (c['longwin'], c['shortwin'], c['leftwin']) = c['wintriple']
    counts, = Command(join(outdir, 'counts.tsv'),
                      ['../count-seq.R', c['sim']],
                      'Rscript ${{SOURCES[0]}} \
                      -i ${{SOURCES[1]}} \
                      -w {0[longwin]} \
                      -s {0[shortwin]} \
                      -l {0[leftwin]} \
                      -o $TARGET'.format(c))
    return counts


# NOTE: Eventually re-evaluate use of meanboundary.
@nest.add_target()
def genmat(outdir, c):
    genmat, = Command(join(outdir, 'genmat.RData'),
                      ['../make-genmat.R', c['model']],
                      'Rscript ${{SOURCES[0]}} \
                      -c ${{SOURCES[1]}} \
                      -w {0[longwin]} \
                      -o $TARGET'.format(c))
    return genmat


@nest.add_target()
def fit(outdir, c):
    fit, = Command(join(outdir, 'fit.RData'),
                   ['../fit-model.R', c['counts'], c['genmat']],
                   'Rscript ${{SOURCES[0]}} \
                   -i ${{SOURCES[1]}} \
                   -l {0[leftwin]} \
                   -m ${{SOURCES[2]}} \
                   -o $TARGET'.format(c))
    return fit


@nest.add_target()
def complete(outdir, c):
    complete, = Command(join(outdir, 'complete.RData'),
                      [c['sim'], c['fit']],
                      'Rscript -e \
                      "load(\'${SOURCES[0]}\'); load(\'${SOURCES[1]}\'); \
                      save(simseq.config, model,file=\'$TARGET\')"')
    return complete


# Here I use `add_target_with_env` so that it knows about my path (leading to a
# recent pandoc).
@nest.add_target_with_env(env)
def report(env, outdir, c):
    report, = env.Command(join(outdir, 'fit.html'),
                          ['../templated-Rmd.sh', '../simulation.Rmd', c['fit']],
                          '${SOURCES[0]} \
                          ${SOURCES[1]} \
                          ${SOURCES[2]}')
    return report
