#!/usr/bin/env scons
# -*- coding: utf-8 -*-

'''
SCons file for driving nestly to create a hierachy of directories
and control files that can explore various model inference settings.

Based on:
https://github.com/fhcrc/nestly/blob/master/examples/scons/SConstruct
https://github.com/cswarth/hiv-sim/blob/master/sims/SConstruct
'''

import os
from os.path import join

from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, COMMAND_LINE_TARGETS

# The following pulls in environment variables from your setup. I had to do it
# in order to have pandoc work through RMarkdown. Eventually I would like to
# get rid of it for portability.
environ = os.environ.copy()
env = Environment(ENV=environ)

# *** The various types of simulations:


# A simple example simulation with lots of explanation.
def _simple_sim():
    name = 'simple'

    # These "base" values will be available to all of our nests, but don't have
    # any levels in the directory hierarchy associated with them.
    base = {'n_sites': 10000,
            'time': 0.1,
            'seed': 0  # Note: always set the seed, otherwise code will halt.
            }

    # Passing an argument to `alias_environment` allows building targets based
    # on nest key. For example, the `sim` files described below can be built by
    # invoking `scons sim`.
    nest = SConsWrap(Nest(base_dict=base), '_'+name, alias_environment=env)

    # Add our aggregate targets, initializing collections that will get
    # populated downstream. At the end of the pipeline, we will operate on
    # these collections. The `add_argument` takes a key which will be the key
    # used for accessing the collection. The `list` argument specifies that the
    # collection will be a list.
    nest.add_aggregate('complete_agg', list)
    nest.add_aggregate('complete_json_agg', list)

    # Add a nest level with the name 'input_file' that takes the files in the
    # inputs directory as its nestable list. Make its label function just the
    # basename.
    nest.add('model', [join('models', f) for f in os.listdir('models')],
             label_func=os.path.basename)

    nest.add('wintriple', [(3, 1, 1)],
             label_func=lambda t: "_".join(str(n) for n in t))
    return nest


# A simulation comparing between different seeds.
def _seed_sim():
    name = 'seed'

    base = {'n_sites': 10000,
            'time': 0.1,
            'wintriple': (3, 1, 1),
            }
    nest = SConsWrap(Nest(base_dict=base), '_'+name, alias_environment=env)
    nest.add_aggregate('complete_agg', list)
    nest.add_aggregate('complete_json_agg', list)
    nest.add('model', [join('models', f) for f in os.listdir('models')],
             label_func=os.path.basename)
    nest.add('seed', range(3), label_func="seed_{}".format)
    return nest


# A simulation comparing between different tmer setups.
def _tmer_sim(mock=True):
    if mock:
        # Mock settings
        name = 'mock'
        params = {
            'n_sites': 10000,
            'n_seeds': 2,
            'wintriples': [(3, 1, 1), (4, 2, 1)],
        }
    else:
        # Real settings
        name = 'tmer'
        params = {
            'n_sites': 10000,
            'n_seeds': 16,
            'wintriples': [(3, 1, 1), (4, 2, 1), (5, 3, 1), (6, 2, 2)],
        }
    base = {'n_sites': params['n_sites'],
            'time': 0.1
            }
    nest = SConsWrap(Nest(base_dict=base), '_'+name, alias_environment=env)
    nest.add_aggregate('complete_agg', list)
    nest.add_aggregate('complete_json_agg', list)
    nest.add('model', [join('models', f) for f in os.listdir('models')],
             label_func=os.path.basename)
    nest.add('seed', range(params['n_seeds']), label_func="seed_{}".format)
    nest.add('wintriple', params['wintriples'],
             label_func=lambda t: "_".join(str(n) for n in t))
    return nest

# A simulation comparing between different tmer setups.
def _tree_cpg_sim():
    # Real settings
    name = 'tree_cpg'
    params = {
        'n_sites': 10000,
        'n_seeds': 3,
        'wintriples': [(4, 2, 1)]
    }
    base = {'n_sites': params['n_sites'],
            'time': 0.1
            }
    nest = SConsWrap(Nest(base_dict=base), '_'+name, alias_environment=env)
    nest.add_aggregate('complete_agg', list)
    nest.add_aggregate('complete_json_agg', list)
    nest.add('model', [join('tree_models', f) for f in os.listdir('tree_models')],
             label_func=os.path.basename)
    nest.add('seed', range(params['n_seeds']), label_func="seed_{}".format)
    nest.add('wintriple', params['wintriples'],
             label_func=lambda t: "_".join(str(n) for n in t))
    return nest



# The ".PHONY" names for our targets.
cl_targets = {'simple': _simple_sim,
              'seed': _seed_sim,
              'tmer': lambda: _tmer_sim(False),
              'mock': lambda: _tmer_sim(True),
              'tree_cpg': _tree_cpg_sim,
              }

# *** Processing command line input:
if not len(COMMAND_LINE_TARGETS) == 1:
    error_str = "Please give exactly one of "+str(cl_targets.keys())
    raise RuntimeError(error_str)

target_str, = COMMAND_LINE_TARGETS
nest = cl_targets[target_str]()

for target_name in cl_targets.keys():
    env.Alias(target_name, '_'+target_name)


# *** Our lovely targets:
@nest.add_target()
def model_type(outdir, c):
    if 'tree' in c['model']:
        return 'tree'
    else:
        print "we have a pair model"
        return 'pair'


@nest.add_target()
def sim(outdir, c):
    assert("{0[seed]}".format(c) != "")  # Setting the seed makes sense.
    sim, = Command(join(outdir, 'sim.RData'),  # TARGET
                   ['../sim-seq.R', c['model']],  # SOURCES
                   'Rscript ${{SOURCES[0]}} \
                   --seed {0[seed]} \
                   --jobid {0[seed]} \
                   -c ${{SOURCES[1]}} \
                   -t {0[time]} \
                   -s {0[n_sites]} \
                   -o $TARGET'.format(c))
    return sim


@nest.add_target()
def counts(outdir, c):
    (c['longwin'], c['shortwin'], c['leftwin']) = c['wintriple']
    counts, = Command(join(outdir, 'counts.tsv'),
                      ['../count-seq.R', c['sim']],
                      'Rscript ${{SOURCES[0]}} \
                      -i ${{SOURCES[1]}} \
                      -w {0[longwin]} \
                      -s {0[shortwin]} \
                      -l {0[leftwin]} \
                      -o $TARGET'.format(c))
    return counts


@nest.add_target()
def genmat(outdir, c):
    genmat, = Command(join(outdir, 'genmat.RData'),
                      ['../make-genmat.R', c['model']],
                      'Rscript ${{SOURCES[0]}} \
                      -c ${{SOURCES[1]}} \
                      -w {0[longwin]} \
                      -o $TARGET'.format(c))
    return genmat


@nest.add_target()
def fit(outdir, c):
    fit, = Command(join(outdir, 'fit.RData'),
                   ['../fit-model.R', c['counts'], c['model'], c['genmat']],
                   'Rscript ${{SOURCES[0]}} \
                   --seed {0[seed]} \
                   --jobid {0[seed]} \
                   -i ${{SOURCES[1]}} \
                   -c ${{SOURCES[2]}} \
                   -t {0[time]} \
                   -m ${{SOURCES[3]}} \
                   -o $TARGET'.format(c))
    return fit


@nest.add_target()
def complete(outdir, c):
    cmdstr = 'Rscript ${{SOURCES[0]}} \
            --sim ${{SOURCES[1]}} \
            --fit ${{SOURCES[2]}} \
            --outfile ${{TARGETS[{}]}}'
    complete, complete_json = Command(
        [join(outdir, 'complete.RData'), join(outdir, 'complete.json')],
        ['../gather-results.R', c['sim'], c['fit']],
        str(cmdstr.format('0') + ' && ' + cmdstr.format('1') + ' --json'))
    c['complete_agg'].append(complete)
    c['complete_json_agg'].append(complete_json)
    return complete, complete_json


# Here I use `add_target_with_env` so that it knows about my path (leading to a
# recent pandoc).
@nest.add_target_with_env(env)
def report(env, outdir, c):
    report, = env.Command(join(outdir, 'complete-simulation.html'),
                          ['../templated-Rmd.sh',
                           '../simulation.Rmd',
                           c['complete']],
                          '${SOURCES[0]} \
                          ${SOURCES[1]} \
                          ${SOURCES[2]}')
    return report


# Move us back up to the directory that contains the models, which is our top.
nest.pop('model')


# A placeholder summary.
@nest.add_target()
def summarize_across(outdir, c):
    summary_across, = Command(join(outdir, 'summary-across.tsv'),
                              ['../summarize-across.R'] + c['complete_agg'],
                              'Rscript ${SOURCES[0]} \
                              --outfile $TARGET \
                              ${SOURCES[1:]}')
    return summary_across


# Collects each simulation in a line of a tsv.
@nest.add_target()
def params_results(outdir, c):
    results, = Command(join(outdir, 'params-results.tsv'),
                       ['../collect-params-results.R'] +
                       c['complete_json_agg'],
                       'Rscript ${SOURCES[0]} ${SOURCES[1:]} > $TARGET')
    return results


# Generate many-sims-results.tsv.pdf.
@nest.add_target()
def many_sims_plots(outdir, c):
    results, = Command(join(outdir, 'params-results.tsv.pdf'),
                       ['../plot-params-sims.R', c['params_results']],
                       'Rscript ${SOURCES[0]} ${SOURCES[1]}')
    return results
