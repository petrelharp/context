totalReads <- cbind(reads[,1:2], totalReads)
head(totalReads)
totalReads<- totalReads[grep('_', totalReads$V1, invert=TRUE),]
head(totalReads)
tail(totalReads)
tail(reads)
totalReads$V1[4:5]
totalReads<- totalReads[grep('M', totalReads$V1, invert=TRUE),]
totalReads<- totalReads[grep('*', totalReads$V1, invert=TRUE),]
tail(totalReads)
for (i in pairs){
totalReads <- cbind(totalReads, reads[,i]+reads[,i+1])
}
totalReads <- c()
samples <- c('W01', 'W02', 'W03', 'W04', 'W05', 'W06', 'W07', 'W08', 'W09', 'W10', 'W11', 'W12', 'R01', 'R02', 'R04', 'R05', 'R06', 'R07', 'R08', 'R09', 'R10', 'R11', 'R12', 'R13')#
for (i in 1:24){#
	f <- paste('/Users/Jessica/Documents/USC/island_mice/mapping-analysis/mapQ-per-chrom/BY_DNA-', i, '.chrY.mapQ-distribution', sep='')#
	mapQ <- read.table(f, head=FALSE)#
	allReads <- sum(mapQ$V2)#
	goodReads <- sum(mapQ[41:70,2])#
	propMapQ <- mapQ$V2/allReads#
	badQual <- sum(propMapQ[0:40])#
	goodQual <- sum(propMapQ[41:70])#
	par(mfrow=c(2,12))#
	barplot(c(badQual, goodQual), ylim=c(0,1), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="Proportion of Reads",  main=paste(samples[i], ' - Chromosome Y', sep=''), xlab='MapQ Score', names.arg=c('<40', '>=40'))#
}
samples <- c('W01', 'W02', 'W03', 'W04', 'W05', 'W06', 'W07', 'W08', 'W09', 'W10', 'W11', 'W12', 'R01', 'R02', 'R04', 'R05', 'R06', 'R07', 'R08', 'R09', 'R10', 'R11', 'R12', 'R13')#
for (i in 1:24){#
	f <- paste('/Users/Jessica/Documents/USC/island_mice/mapping-analysis/mapQ-per-chrom/BY_DNA-', i, '.chrY.mapQ-distribution', sep='')#
	mapQ <- read.table(f, head=FALSE)#
	allReads <- sum(mapQ$V2)#
	goodReads <- sum(mapQ[41:70,2])#
	propMapQ <- mapQ$V2/allReads#
	badQual <- sum(propMapQ[0:40])#
	goodQual <- sum(propMapQ[41:70])#
	par(mfrow=c(2,12), mai=c(0.4,0.2,0.2,0.4))#
	barplot(c(badQual, goodQual), ylim=c(0,1), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="Proportion of Reads",  main=paste(samples[i], ' - Chromosome Y', sep=''), xlab='MapQ Score', names.arg=c('<40', '>=40'))#
}
samples <- c('W01', 'W02', 'W03', 'W04', 'W05', 'W06', 'W07', 'W08', 'W09', 'W10', 'W11', 'W12', 'R01', 'R02', 'R04', 'R05', 'R06', 'R07', 'R08', 'R09', 'R10', 'R11', 'R12', 'R13')#
par(mfrow=c(2,12))#
for (i in 1:24){#
	f <- paste('/Users/Jessica/Documents/USC/island_mice/mapping-analysis/mapQ-per-chrom/BY_DNA-', i, '.chrY.mapQ-distribution', sep='')#
	mapQ <- read.table(f, head=FALSE)#
	allReads <- sum(mapQ$V2)#
	goodReads <- sum(mapQ[41:70,2])#
	propMapQ <- mapQ$V2/allReads#
	badQual <- sum(propMapQ[0:40])#
	goodQual <- sum(propMapQ[41:70])#
	par(mfrow=c(2,12), mai=c(0.4,0.2,0.2,0.4))#
	barplot(c(badQual, goodQual), ylim=c(0,1), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="Proportion of Reads",  main=paste(samples[i], ' - Chromosome Y', sep=''), xlab='MapQ Score', names.arg=c('<40', '>=40'))#
}
par(mfrow=c(4,6))#
for (i in 1:24){#
	f <- paste('/Users/Jessica/Documents/USC/island_mice/mapping-analysis/mapQ-per-chrom/BY_DNA-', i, '.chrY.mapQ-distribution', sep='')#
	mapQ <- read.table(f, head=FALSE)#
	allReads <- sum(mapQ$V2)#
	goodReads <- sum(mapQ[41:70,2])#
	propMapQ <- mapQ$V2/allReads#
	badQual <- sum(propMapQ[0:40])#
	goodQual <- sum(propMapQ[41:70])#
	par(mfrow=c(2,12), mai=c(0.4,0.2,0.2,0.4))#
	barplot(c(badQual, goodQual), ylim=c(0,1), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="Proportion of Reads",  main=paste(samples[i], ' - Chromosome Y', sep=''), xlab='MapQ Score', names.arg=c('<40', '>=40'))#
}
samples <- c('W01', 'W02', 'W03', 'W04', 'W05', 'W06', 'W07', 'W08', 'W09', 'W10', 'W11', 'W12', 'R01', 'R02', 'R04', 'R05', 'R06', 'R07', 'R08', 'R09', 'R10', 'R11', 'R12', 'R13')#
par(mfrow=c(6,4))#
for (i in 1:24){#
	f <- paste('/Users/Jessica/Documents/USC/island_mice/mapping-analysis/mapQ-per-chrom/BY_DNA-', i, '.chrY.mapQ-distribution', sep='')#
	mapQ <- read.table(f, head=FALSE)#
	allReads <- sum(mapQ$V2)#
	goodReads <- sum(mapQ[41:70,2])#
	propMapQ <- mapQ$V2/allReads#
	badQual <- sum(propMapQ[0:40])#
	goodQual <- sum(propMapQ[41:70])#
	par(mfrow=c(2,12), mai=c(0.4,0.2,0.2,0.4))#
	barplot(c(badQual, goodQual), ylim=c(0,1), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="Proportion of Reads",  main=paste(samples[i], ' - Chromosome Y', sep=''), xlab='MapQ Score', names.arg=c('<40', '>=40'))#
}
?par
samples <- c('W01', 'W02', 'W03', 'W04', 'W05', 'W06', 'W07', 'W08', 'W09', 'W10', 'W11', 'W12', 'R01', 'R02', 'R04', 'R05', 'R06', 'R07', 'R08', 'R09', 'R10', 'R11', 'R12', 'R13')#
par(mfcol=c(6,4))#
for (i in 1:24){#
	f <- paste('/Users/Jessica/Documents/USC/island_mice/mapping-analysis/mapQ-per-chrom/BY_DNA-', i, '.chrY.mapQ-distribution', sep='')#
	mapQ <- read.table(f, head=FALSE)#
	allReads <- sum(mapQ$V2)#
	goodReads <- sum(mapQ[41:70,2])#
	propMapQ <- mapQ$V2/allReads#
	badQual <- sum(propMapQ[0:40])#
	goodQual <- sum(propMapQ[41:70])#
	par(pin=c(1.7, 1.2))#
	barplot(c(badQual, goodQual), ylim=c(0,1), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="Proportion of Reads",  main=paste(samples[i], ' - Chromosome Y', sep=''), xlab='MapQ Score', names.arg=c('<40', '>=40'))#
}
pdf('/Users/Jessica/Documents/USC/island_mice/plots/mapping/PropMapQ-per-chrom-goodQual.pdf', height=11, width=8.5)#
samples <- c('W01', 'W02', 'W03', 'W04', 'W05', 'W06', 'W07', 'W08', 'W09', 'W10', 'W11', 'W12', 'R01', 'R02', 'R04', 'R05', 'R06', 'R07', 'R08', 'R09', 'R10', 'R11', 'R12', 'R13')#
par(mfcol=c(6,4))#
for (i in 1:24){#
	f <- paste('/Users/Jessica/Documents/USC/island_mice/mapping-analysis/mapQ-per-chrom/BY_DNA-', i, '.chrY.mapQ-distribution', sep='')#
	mapQ <- read.table(f, head=FALSE)#
	allReads <- sum(mapQ$V2)#
	goodReads <- sum(mapQ[41:70,2])#
	propMapQ <- mapQ$V2/allReads#
	badQual <- sum(propMapQ[0:40])#
	goodQual <- sum(propMapQ[41:70])#
	par(pin=c(1.7, 1.2))#
	barplot(c(badQual, goodQual), ylim=c(0,1), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="Proportion of Reads",  main=paste(samples[i], ' - Chromosome Y', sep=''), xlab='MapQ Score', names.arg=c('<40', '>=40'))#
}#
dev.off()
pdf('/Users/Jessica/Documents/USC/island_mice/plots/mapping/PropMapQ-per-chrom-goodQual.pdf', height=11, width=8.5)#
samples <- c('W01', 'W02', 'W03', 'W04', 'W05', 'W06', 'W07', 'W08', 'W09', 'W10', 'W11', 'W12', 'R01', 'R02', 'R04', 'R05', 'R06', 'R07', 'R08', 'R09', 'R10', 'R11', 'R12', 'R13')#
par(mfcol=c(6,4))#
for (i in 1:24){#
	f <- paste('/Users/Jessica/Documents/USC/island_mice/mapping-analysis/mapQ-per-chrom/BY_DNA-', i, '.chrY.mapQ-distribution', sep='')#
	mapQ <- read.table(f, head=FALSE)#
	allReads <- sum(mapQ$V2)#
	goodReads <- sum(mapQ[41:70,2])#
	propMapQ <- mapQ$V2/allReads#
	badQual <- sum(propMapQ[0:40])#
	goodQual <- sum(propMapQ[41:70])#
	par(pin=c(1.5, 1))#
	barplot(c(badQual, goodQual), ylim=c(0,1), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="Proportion of Reads",  main=paste(samples[i], ' - Chromosome Y', sep=''), xlab='MapQ Score', names.arg=c('<40', '>=40'))#
}#
dev.off()
pdf('/Users/Jessica/Documents/USC/island_mice/plots/mapping/PropMapQ-per-chrom-goodQual.pdf', height=11, width=8.5)#
samples <- c('W01', 'W02', 'W03', 'W04', 'W05', 'W06', 'W07', 'W08', 'W09', 'W10', 'W11', 'W12', 'R01', 'R02', 'R04', 'R05', 'R06', 'R07', 'R08', 'R09', 'R10', 'R11', 'R12', 'R13')#
par(mfcol=c(6,4))#
for (i in 1:24){#
	f <- paste('/Users/Jessica/Documents/USC/island_mice/mapping-analysis/mapQ-per-chrom/BY_DNA-', i, '.chrY.mapQ-distribution', sep='')#
	mapQ <- read.table(f, head=FALSE)#
	allReads <- sum(mapQ$V2)#
	goodReads <- sum(mapQ[41:70,2])#
	propMapQ <- mapQ$V2/allReads#
	badQual <- sum(propMapQ[0:40])#
	goodQual <- sum(propMapQ[41:70])#
	par(pin=c(1.5, 1), mai(0.2,0.1,0.1,0.1))#
	barplot(c(badQual, goodQual), ylim=c(0,1), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="Proportion of Reads",  main=paste(samples[i], ' - Chromosome Y', sep=''), xlab='MapQ Score', names.arg=c('<40', '>=40'))#
}#
dev.off()
pdf('/Users/Jessica/Documents/USC/island_mice/plots/mapping/PropMapQ-per-chrom-goodQual.pdf', height=11, width=8.5)#
samples <- c('W01', 'W02', 'W03', 'W04', 'W05', 'W06', 'W07', 'W08', 'W09', 'W10', 'W11', 'W12', 'R01', 'R02', 'R04', 'R05', 'R06', 'R07', 'R08', 'R09', 'R10', 'R11', 'R12', 'R13')#
par(mfcol=c(6,4))#
for (i in 1:24){#
	f <- paste('/Users/Jessica/Documents/USC/island_mice/mapping-analysis/mapQ-per-chrom/BY_DNA-', i, '.chrY.mapQ-distribution', sep='')#
	mapQ <- read.table(f, head=FALSE)#
	allReads <- sum(mapQ$V2)#
	goodReads <- sum(mapQ[41:70,2])#
	propMapQ <- mapQ$V2/allReads#
	badQual <- sum(propMapQ[0:40])#
	goodQual <- sum(propMapQ[41:70])#
	par(pin=c(1.5, 1), mai=c(0.2,0.1,0.1,0.1))#
	barplot(c(badQual, goodQual), ylim=c(0,1), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="Proportion of Reads",  main=paste(samples[i], ' - Chromosome Y', sep=''), xlab='MapQ Score', names.arg=c('<40', '>=40'))#
}#
dev.off()
pdf('/Users/Jessica/Documents/USC/island_mice/plots/mapping/PropMapQ-per-chrom-goodQual.pdf', height=11, width=8.5)#
samples <- c('W01', 'W02', 'W03', 'W04', 'W05', 'W06', 'W07', 'W08', 'W09', 'W10', 'W11', 'W12', 'R01', 'R02', 'R04', 'R05', 'R06', 'R07', 'R08', 'R09', 'R10', 'R11', 'R12', 'R13')#
par(mfcol=c(6,4))#
for (i in 1:24){#
	f <- paste('/Users/Jessica/Documents/USC/island_mice/mapping-analysis/mapQ-per-chrom/BY_DNA-', i, '.chrY.mapQ-distribution', sep='')#
	mapQ <- read.table(f, head=FALSE)#
	allReads <- sum(mapQ$V2)#
	goodReads <- sum(mapQ[41:70,2])#
	propMapQ <- mapQ$V2/allReads#
	badQual <- sum(propMapQ[0:40])#
	goodQual <- sum(propMapQ[41:70])#
	par(pin=c(1.2, 1), mai=c(0.2,0.1,0.1,0.1))#
	barplot(c(badQual, goodQual), ylim=c(0,1), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="Proportion of Reads",  main=paste(samples[i], ' - Chromosome Y', sep=''), xlab='MapQ Score', names.arg=c('<40', '>=40'))#
}#
dev.off()
pdf('/Users/Jessica/Documents/USC/island_mice/plots/mapping/PropMapQ-per-chrom-goodQual.pdf', height=11, width=8.5)#
samples <- c('W01', 'W02', 'W03', 'W04', 'W05', 'W06', 'W07', 'W08', 'W09', 'W10', 'W11', 'W12', 'R01', 'R02', 'R04', 'R05', 'R06', 'R07', 'R08', 'R09', 'R10', 'R11', 'R12', 'R13')#
par(mfcol=c(6,4))#
for (i in 1:24){#
	f <- paste('/Users/Jessica/Documents/USC/island_mice/mapping-analysis/mapQ-per-chrom/BY_DNA-', i, '.chrY.mapQ-distribution', sep='')#
	mapQ <- read.table(f, head=FALSE)#
	allReads <- sum(mapQ$V2)#
	goodReads <- sum(mapQ[41:70,2])#
	propMapQ <- mapQ$V2/allReads#
	badQual <- sum(propMapQ[0:40])#
	goodQual <- sum(propMapQ[41:70])#
	par(pin=c(1.2, 1), mai=c(0.4,0.2,0.2,0.2))#
	barplot(c(badQual, goodQual), ylim=c(0,1), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="Proportion of Reads",  main=paste(samples[i], ' - Chromosome Y', sep=''), xlab='MapQ Score', names.arg=c('<40', '>=40'))#
}#
dev.off()
pdf('/Users/Jessica/Documents/USC/island_mice/plots/mapping/PropMapQ-per-chrom-goodQual.pdf', height=11, width=8.5)#
samples <- c('W01', 'W02', 'W03', 'W04', 'W05', 'W06', 'W07', 'W08', 'W09', 'W10', 'W11', 'W12', 'R01', 'R02', 'R04', 'R05', 'R06', 'R07', 'R08', 'R09', 'R10', 'R11', 'R12', 'R13')#
par(mfcol=c(6,4))#
for (i in 1:24){#
	f <- paste('/Users/Jessica/Documents/USC/island_mice/mapping-analysis/mapQ-per-chrom/BY_DNA-', i, '.chrY.mapQ-distribution', sep='')#
	mapQ <- read.table(f, head=FALSE)#
	allReads <- sum(mapQ$V2)#
	goodReads <- sum(mapQ[41:70,2])#
	propMapQ <- mapQ$V2/allReads#
	badQual <- sum(propMapQ[0:40])#
	goodQual <- sum(propMapQ[41:70])#
	par(pin=c(1.2, 1), mai=c(0.6,0.2,0.4,0.2))#
	barplot(c(badQual, goodQual), ylim=c(0,1), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="Proportion of Reads",  main=paste(samples[i], ' - Chromosome Y', sep=''), xlab='MapQ Score', names.arg=c('<40', '>=40'))#
}#
dev.off()
pdf('/Users/Jessica/Documents/USC/island_mice/plots/mapping/PropMapQ-per-chrom-goodQual.pdf', height=11, width=8.5)#
samples <- c('W01', 'W02', 'W03', 'W04', 'W05', 'W06', 'W07', 'W08', 'W09', 'W10', 'W11', 'W12', 'R01', 'R02', 'R04', 'R05', 'R06', 'R07', 'R08', 'R09', 'R10', 'R11', 'R12', 'R13')#
par(mfcol=c(6,4))#
for (i in 1:24){#
	f <- paste('/Users/Jessica/Documents/USC/island_mice/mapping-analysis/mapQ-per-chrom/BY_DNA-', i, '.chrY.mapQ-distribution', sep='')#
	mapQ <- read.table(f, head=FALSE)#
	allReads <- sum(mapQ$V2)#
	goodReads <- sum(mapQ[41:70,2])#
	propMapQ <- mapQ$V2/allReads#
	badQual <- sum(propMapQ[0:40])#
	goodQual <- sum(propMapQ[41:70])#
	par(pin=c(1.2, 1))#
	barplot(c(badQual, goodQual), ylim=c(0,1), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="Proportion of Reads",  main=paste(samples[i], ' - Chromosome Y', sep=''), xlab='MapQ Score', names.arg=c('<40', '>=40'))#
}#
dev.off()
pdf('/Users/Jessica/Documents/USC/island_mice/plots/mapping/PropMapQ-per-chrom-goodQual.pdf', height=11, width=8.5)#
samples <- c('W01', 'W02', 'W03', 'W04', 'W05', 'W06', 'W07', 'W08', 'W09', 'W10', 'W11', 'W12', 'R01', 'R02', 'R04', 'R05', 'R06', 'R07', 'R08', 'R09', 'R10', 'R11', 'R12', 'R13')#
par(mfcol=c(6,4))#
for (i in 1:24){#
	f <- paste('/Users/Jessica/Documents/USC/island_mice/mapping-analysis/mapQ-per-chrom/BY_DNA-', i, '.chrY.mapQ-distribution', sep='')#
	mapQ <- read.table(f, head=FALSE)#
	allReads <- sum(mapQ$V2)#
	goodReads <- sum(mapQ[41:70,2])#
	propMapQ <- mapQ$V2/allReads#
	badQual <- sum(propMapQ[0:40])#
	goodQual <- sum(propMapQ[41:70])#
	par(pin=c(1.2, .8))#
	barplot(c(badQual, goodQual), ylim=c(0,1), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="Proportion of Reads",  main=paste(samples[i], ' - Chromosome Y', sep=''), xlab='MapQ Score', names.arg=c('<40', '>=40'))#
}#
dev.off()
pdf('/Users/Jessica/Documents/USC/island_mice/plots/mapping/PropMapQ-per-chrom-goodQual.pdf', height=11, width=8.5)#
samples <- c('W01', 'W02', 'W03', 'W04', 'W05', 'W06', 'W07', 'W08', 'W09', 'W10', 'W11', 'W12', 'R01', 'R02', 'R04', 'R05', 'R06', 'R07', 'R08', 'R09', 'R10', 'R11', 'R12', 'R13')#
par(mfcol=c(6,4))#
for (i in 1:24){#
	f <- paste('/Users/Jessica/Documents/USC/island_mice/mapping-analysis/mapQ-per-chrom/BY_DNA-', i, '.chrY.mapQ-distribution', sep='')#
	mapQ <- read.table(f, head=FALSE)#
	allReads <- sum(mapQ$V2)#
	goodReads <- sum(mapQ[41:70,2])#
	propMapQ <- mapQ$V2/allReads#
	badQual <- sum(propMapQ[0:40])#
	goodQual <- sum(propMapQ[41:70])#
	par(pin=c(0.8, 1.2))#
	barplot(c(badQual, goodQual), ylim=c(0,1), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="Proportion of Reads",  main=paste(samples[i], ' - Chromosome Y', sep=''), xlab='MapQ Score', names.arg=c('<40', '>=40'))#
}#
dev.off()
pdf('/Users/Jessica/Documents/USC/island_mice/plots/mapping/PropMapQ-per-chrom-goodQual.pdf', height=11, width=8.5)#
samples <- c('W01', 'W02', 'W03', 'W04', 'W05', 'W06', 'W07', 'W08', 'W09', 'W10', 'W11', 'W12', 'R01', 'R02', 'R04', 'R05', 'R06', 'R07', 'R08', 'R09', 'R10', 'R11', 'R12', 'R13')#
par(mfcol=c(6,4))#
for (i in 1:24){#
	f <- paste('/Users/Jessica/Documents/USC/island_mice/mapping-analysis/mapQ-per-chrom/BY_DNA-', i, '.chrY.mapQ-distribution', sep='')#
	mapQ <- read.table(f, head=FALSE)#
	allReads <- sum(mapQ$V2)#
	goodReads <- sum(mapQ[41:70,2])#
	propMapQ <- mapQ$V2/allReads#
	badQual <- sum(propMapQ[0:40])#
	goodQual <- sum(propMapQ[41:70])#
	par(pin=c(0.8, 0.8))#
	barplot(c(badQual, goodQual), ylim=c(0,1), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="Proportion of Reads",  main=paste(samples[i], ' - Chromosome Y', sep=''), xlab='MapQ Score', names.arg=c('<40', '>=40'))#
}#
dev.off()
pdf('/Users/Jessica/Documents/USC/island_mice/plots/mapping/PropMapQ-per-chrom-goodQual.pdf', height=11, width=8.5)#
samples <- c('W01', 'W02', 'W03', 'W04', 'W05', 'W06', 'W07', 'W08', 'W09', 'W10', 'W11', 'W12', 'R01', 'R02', 'R04', 'R05', 'R06', 'R07', 'R08', 'R09', 'R10', 'R11', 'R12', 'R13')#
par(mfcol=c(6,4))#
for (i in 1:24){#
	f <- paste('/Users/Jessica/Documents/USC/island_mice/mapping-analysis/mapQ-per-chrom/BY_DNA-', i, '.chrY.mapQ-distribution', sep='')#
	mapQ <- read.table(f, head=FALSE)#
	allReads <- sum(mapQ$V2)#
	goodReads <- sum(mapQ[41:70,2])#
	propMapQ <- mapQ$V2/allReads#
	badQual <- sum(propMapQ[0:40])#
	goodQual <- sum(propMapQ[41:70])#
	par(pin=c(1.5,1))#
	barplot(c(badQual, goodQual), ylim=c(0,1), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="Proportion of Reads",  main=paste(samples[i], ' - Chromosome Y', sep=''), xlab='MapQ Score', names.arg=c('<40', '>=40'))#
}#
dev.off()
#plot good vs bad quality reads per sample (good >= 40, bad < 40)#
pdf('/Users/Jessica/Documents/USC/island_mice/plots/mapping/PropMapQ-per-chrom-goodQual.pdf', height=11, width=8.5)#
samples <- c('W01', 'W02', 'W03', 'W04', 'W05', 'W06', 'W07', 'W08', 'W09', 'W10', 'W11', 'W12', 'R01', 'R02', 'R04', 'R05', 'R06', 'R07', 'R08', 'R09', 'R10', 'R11', 'R12', 'R13')#
par(mfcol=c(6,4))#
for (i in 1:24){#
	f <- paste('/Users/Jessica/Documents/USC/island_mice/mapping-analysis/mapQ-per-chrom/BY_DNA-', i, '.chrY.mapQ-distribution', sep='')#
	mapQ <- read.table(f, head=FALSE)#
	allReads <- sum(mapQ$V2)#
	goodReads <- sum(mapQ[41:70,2])#
	propMapQ <- mapQ$V2/allReads#
	badQual <- sum(propMapQ[0:40])#
	goodQual <- sum(propMapQ[41:70])#
	par(pin=c(1,1.2))#
	barplot(c(badQual, goodQual), ylim=c(0,1), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="Proportion of Reads",  main=paste(samples[i], ' - Chromosome Y', sep=''), xlab='MapQ Score', names.arg=c('<40', '>=40'))#
}#
dev.off()
pdf('/Users/Jessica/Documents/USC/island_mice/plots/mapping/PropMapQ-per-chrom-goodQual.pdf', height=11, width=8.5)#
samples <- c('W01', 'W02', 'W03', 'W04', 'W05', 'W06', 'W07', 'W08', 'W09', 'W10', 'W11', 'W12', 'R01', 'R02', 'R04', 'R05', 'R06', 'R07', 'R08', 'R09', 'R10', 'R11', 'R12', 'R13')#
par(mfcol=c(6,4))#
for (i in 1:24){#
	f <- paste('/Users/Jessica/Documents/USC/island_mice/mapping-analysis/mapQ-per-chrom/BY_DNA-', i, '.chrY.mapQ-distribution', sep='')#
	mapQ <- read.table(f, head=FALSE)#
	allReads <- sum(mapQ$V2)#
	goodReads <- sum(mapQ[41:70,2])#
	propMapQ <- mapQ$V2/allReads#
	badQual <- sum(propMapQ[0:40])#
	goodQual <- sum(propMapQ[41:70])#
	par(fin=c(1,1.2))#
	barplot(c(badQual, goodQual), ylim=c(0,1), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="Proportion of Reads",  main=paste(samples[i], ' - Chromosome Y', sep=''), xlab='MapQ Score', names.arg=c('<40', '>=40'))#
}#
dev.off()
pdf('/Users/Jessica/Documents/USC/island_mice/plots/mapping/PropMapQ-per-chrom-goodQual.pdf', height=10, width=8)#
samples <- c('W01', 'W02', 'W03', 'W04', 'W05', 'W06', 'W07', 'W08', 'W09', 'W10', 'W11', 'W12', 'R01', 'R02', 'R04', 'R05', 'R06', 'R07', 'R08', 'R09', 'R10', 'R11', 'R12', 'R13')#
par(mfcol=c(6,4))#
for (i in 1:24){#
	f <- paste('/Users/Jessica/Documents/USC/island_mice/mapping-analysis/mapQ-per-chrom/BY_DNA-', i, '.chrY.mapQ-distribution', sep='')#
	mapQ <- read.table(f, head=FALSE)#
	allReads <- sum(mapQ$V2)#
	goodReads <- sum(mapQ[41:70,2])#
	propMapQ <- mapQ$V2/allReads#
	badQual <- sum(propMapQ[0:40])#
	goodQual <- sum(propMapQ[41:70])#
	par(pin=c(1,1.2))#
	barplot(c(badQual, goodQual), ylim=c(0,1), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="Proportion of Reads",  main=paste(samples[i], ' - Chromosome Y', sep=''), xlab='MapQ Score', names.arg=c('<40', '>=40'))#
}#
dev.off()
pdf('/Users/Jessica/Documents/USC/island_mice/plots/mapping/PropMapQ-per-chrom-goodQual.pdf', height=11, width=8.5)#
samples <- c('W01', 'W02', 'W03', 'W04', 'W05', 'W06', 'W07', 'W08', 'W09', 'W10', 'W11', 'W12', 'R01', 'R02', 'R04', 'R05', 'R06', 'R07', 'R08', 'R09', 'R10', 'R11', 'R12', 'R13')#
par(mfcol=c(6,4))#
for (i in 1:24){#
	f <- paste('/Users/Jessica/Documents/USC/island_mice/mapping-analysis/mapQ-per-chrom/BY_DNA-', i, '.chrY.mapQ-distribution', sep='')#
	mapQ <- read.table(f, head=FALSE)#
	allReads <- sum(mapQ$V2)#
	goodReads <- sum(mapQ[41:70,2])#
	propMapQ <- mapQ$V2/allReads#
	badQual <- sum(propMapQ[0:40])#
	goodQual <- sum(propMapQ[41:70])#
	par(pin=c(1,1.2))#
	barplot(c(badQual, goodQual), ylim=c(0,1), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="Proportion of Reads",  main=paste(samples[i], ' - Chromosome Y', sep=''), xlab='MapQ Score', names.arg=c('<40', '>=40'))#
}#
dev.off()
pdf('/Users/Jessica/Documents/USC/island_mice/plots/mapping/PropMapQ-per-chrom-goodQual.pdf', height=11, width=8.5)#
samples <- c('W01', 'W02', 'W03', 'W04', 'W05', 'W06', 'W07', 'W08', 'W09', 'W10', 'W11', 'W12', 'R01', 'R02', 'R04', 'R05', 'R06', 'R07', 'R08', 'R09', 'R10', 'R11', 'R12', 'R13')#
par(mfcol=c(6,4))#
for (i in 1:24){#
	f <- paste('/Users/Jessica/Documents/USC/island_mice/mapping-analysis/mapQ-per-chrom/BY_DNA-', i, '.chrY.mapQ-distribution', sep='')#
	mapQ <- read.table(f, head=FALSE)#
	allReads <- sum(mapQ$V2)#
	goodReads <- sum(mapQ[41:70,2])#
	propMapQ <- mapQ$V2/allReads#
	badQual <- sum(propMapQ[0:40])#
	goodQual <- sum(propMapQ[41:70])#
	par(pin=c(1,1.2), mar=c(4,2,2,1))#
	barplot(c(badQual, goodQual), ylim=c(0,1), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="Proportion of Reads",  main=paste(samples[i], ' - Chromosome Y', sep=''), xlab='MapQ Score', names.arg=c('<40', '>=40'))#
}#
dev.off()
f
barplot(c(badQual, goodQual), ylim=c(0,1), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="Proportion of Reads",  main=paste(samples[i], ' - Chromosome Y', sep=''), xlab='MapQ Score', names.arg=c('<40', '>=40'))
for (i in 1:24){#
	f <- paste('/Users/Jessica/Documents/USC/island_mice/mapping-analysis/mapQ-per-chrom/BY_DNA-', i, '.chrY.mapQ-distribution', sep='')#
	mapQ <- read.table(f, head=FALSE)#
	allReads <- sum(mapQ$V2)#
	goodReads <- sum(mapQ[41:70,2])#
	propMapQ <- mapQ$V2/allReads#
	badQual <- sum(propMapQ[0:40])#
	goodQual <- sum(propMapQ[41:70])#
	# par(pin=c(1,1.2), mar=c(4,2,2,1))#
	quartz()#
	barplot(c(badQual, goodQual), ylim=c(0,1), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="Proportion of Reads",  main=paste(samples[i], ' - Chromosome Y', sep=''), xlab='MapQ Score', names.arg=c('<40', '>=40'))#
}
pdf('/Users/Jessica/Documents/USC/island_mice/plots/mapping/PropMapQ-per-chrom-goodQual.pdf', height=11, width=8.5)#
samples <- c('W01', 'W02', 'W03', 'W04', 'W05', 'W06', 'W07', 'W08', 'W09', 'W10', 'W11', 'W12', 'R01', 'R02', 'R04', 'R05', 'R06', 'R07', 'R08', 'R09', 'R10', 'R11', 'R12', 'R13')#
par(mfcol=c(6,4))#
for (i in 1:24){#
	f <- paste('/Users/Jessica/Documents/USC/island_mice/mapping-analysis/mapQ-per-chrom/BY_DNA-', i, '.chrY.mapQ-distribution', sep='')#
	mapQ <- read.table(f, head=FALSE)#
	allReads <- sum(mapQ$V1)#
	propMapQ <- mapQ$V2/allReads#
	badQual <- sum(propMapQ[which(mapQ$V2 < 40)])#
	goodQual <- sum(propMapQ[which(mapQ$V2 >= 40)])#
	par(pin=c(1,1.2), mar=c(4,2,2,1))#
	barplot(c(badQual, goodQual), ylim=c(0,1), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="Proportion of Reads",  main=paste(samples[i], ' - Chromosome Y', sep=''), xlab='MapQ Score', names.arg=c('<40', '>=40'))#
}#
dev.off()
head(mapQ)
pdf('/Users/Jessica/Documents/USC/island_mice/plots/mapping/PropMapQ-per-chrom-goodQual.pdf', height=11, width=8.5)#
samples <- c('W01', 'W02', 'W03', 'W04', 'W05', 'W06', 'W07', 'W08', 'W09', 'W10', 'W11', 'W12', 'R01', 'R02', 'R04', 'R05', 'R06', 'R07', 'R08', 'R09', 'R10', 'R11', 'R12', 'R13')#
par(mfcol=c(6,4))#
for (i in 1:24){#
	f <- paste('/Users/Jessica/Documents/USC/island_mice/mapping-analysis/mapQ-per-chrom/BY_DNA-', i, '.chrY.mapQ-distribution', sep='')#
	mapQ <- read.table(f, head=FALSE)#
	allReads <- sum(mapQ$V1)#
	mapQ$propMapQ <- mapQ$V1/allReads#
	badQual <- sum(propMapQ[which(mapQ$V2 < 40)])#
	goodQual <- sum(propMapQ[which(mapQ$V2 >= 40)])#
	par(pin=c(1,1.2), mar=c(4,2,2,1))#
	barplot(c(badQual, goodQual), ylim=c(0,1), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="Proportion of Reads",  main=paste(samples[i], ' - Chromosome Y', sep=''), xlab='MapQ Score', names.arg=c('<40', '>=40'))#
}#
dev.off()
head(mapQ)
pdf('/Users/Jessica/Documents/USC/island_mice/plots/mapping/PropMapQ-per-chrom-goodQual.pdf', height=11, width=8.5)#
samples <- c('W01', 'W02', 'W03', 'W04', 'W05', 'W06', 'W07', 'W08', 'W09', 'W10', 'W11', 'W12', 'R01', 'R02', 'R04', 'R05', 'R06', 'R07', 'R08', 'R09', 'R10', 'R11', 'R12', 'R13')#
par(mfcol=c(6,4))#
for (i in 1:24){#
	f <- paste('/Users/Jessica/Documents/USC/island_mice/mapping-analysis/mapQ-per-chrom/BY_DNA-', i, '.chrY.mapQ-distribution', sep='')#
	mapQ <- read.table(f, head=FALSE)#
	allReads <- sum(mapQ$V1)#
	mapQ$propMapQ <- mapQ$V1/allReads#
	badQual <- sum(mapQ$propMapQ[which(mapQ$V2 < 40)])#
	goodQual <- sum(mapQ$propMapQ[which(mapQ$V2 >= 40)])#
	par(pin=c(1,1.2), mar=c(4,2,2,1))#
	barplot(c(badQual, goodQual), ylim=c(0,1), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="Proportion of Reads",  main=paste(samples[i], ' - Chromosome Y', sep=''), xlab='MapQ Score', names.arg=c('<40', '>=40'))#
}#
dev.off()
head(totalReads)
for (i in pairs){
totalReads <- cbind(totalReads, reads[,i]+reads[,i+1])
}
totalReads <- cbind(reads[,1:2], totalReads)
totalReads<- totalReads[grep('_', totalReads$V1, invert=TRUE),]
totalReads<- totalReads[grep('M', totalReads$V1, invert=TRUE),]
totalReads<- totalReads[grep('\\*', totalReads$V1, invert=TRUE),]
head(totalReads)
tail(totalReads)
nrow(totalReads)
#plot good vs bad quality reads per sample (good >= 40, bad < 40)#
pdf('/Users/Jessica/Documents/USC/island_mice/plots/mapping/PropMapQ-per-chrom-goodQual.pdf', height=11, width=8.5)#
samples <- c('W01', 'W02', 'W03', 'W04', 'W05', 'W06', 'W07', 'W08', 'W09', 'W10', 'W11', 'W12', 'R01', 'R02', 'R04', 'R05', 'R06', 'R07', 'R08', 'R09', 'R10', 'R11', 'R12', 'R13')#
par(mfcol=c(6,4))#
for (i in 1:24){#
	f <- paste('/Users/Jessica/Documents/USC/island_mice/mapping-analysis/mapQ-per-chrom/BY_DNA-', i, '.chrY.mapQ-distribution', sep='')#
	mapQ <- read.table(f, head=FALSE)#
	# allReads <- sum(mapQ$V1)#
	all reads <- totalReads[21,i+2]#
	mapQ$propMapQ <- mapQ$V1/allReads#
	badQual <- sum(mapQ$propMapQ[which(mapQ$V2 < 40)])#
	goodQual <- sum(mapQ$propMapQ[which(mapQ$V2 >= 40)])#
	par(pin=c(1,1.2), mar=c(4,2,2,1))#
	barplot(c(badQual, goodQual), ylim=c(0,1), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="Proportion of Reads",  main=paste(samples[i], ' - Chromosome Y', sep=''), xlab='MapQ Score', names.arg=c('<40', '>=40'))#
}#
dev.off()
pdf('/Users/Jessica/Documents/USC/island_mice/plots/mapping/PropMapQ-per-chrom-goodQual.pdf', height=11, width=8.5)#
samples <- c('W01', 'W02', 'W03', 'W04', 'W05', 'W06', 'W07', 'W08', 'W09', 'W10', 'W11', 'W12', 'R01', 'R02', 'R04', 'R05', 'R06', 'R07', 'R08', 'R09', 'R10', 'R11', 'R12', 'R13')#
par(mfcol=c(6,4))#
for (i in 1:24){#
	f <- paste('/Users/Jessica/Documents/USC/island_mice/mapping-analysis/mapQ-per-chrom/BY_DNA-', i, '.chrY.mapQ-distribution', sep='')#
	mapQ <- read.table(f, head=FALSE)#
	# allReads <- sum(mapQ$V1)#
	all reads <- totalReads[21,i+2]#
	mapQ$propMapQ <- mapQ$V1/allReads#
	badQual <- sum(mapQ$propMapQ[which(mapQ$V2 < 40)])#
	goodQual <- sum(mapQ$propMapQ[which(mapQ$V2 >= 40)])#
	par(pin=c(1,1.2), mar=c(4,2,2,1))#
	barplot(c(badQual, goodQual), ylim=c(0,1), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="Proportion of Reads",  main=paste(samples[i], ' - Chromosome Y', sep=''), xlab='MapQ Score', names.arg=c('<40', '>=40'))#
}#
dev.off()
pdf('/Users/Jessica/Documents/USC/island_mice/plots/mapping/PropMapQ-per-chrom-goodQual.pdf', height=11, width=8.5)#
samples <- c('W01', 'W02', 'W03', 'W04', 'W05', 'W06', 'W07', 'W08', 'W09', 'W10', 'W11', 'W12', 'R01', 'R02', 'R04', 'R05', 'R06', 'R07', 'R08', 'R09', 'R10', 'R11', 'R12', 'R13')#
par(mfcol=c(6,4))#
for (i in 1:24){#
	f <- paste('/Users/Jessica/Documents/USC/island_mice/mapping-analysis/mapQ-per-chrom/BY_DNA-', i, '.chrY.mapQ-distribution', sep='')#
	mapQ <- read.table(f, head=FALSE)#
	# allReads <- sum(mapQ$V1)#
	all reads <- totalReads[21,i+2]#
	mapQ$propMapQ <- mapQ$V1/allReads#
	badQual <- sum(mapQ$propMapQ[which(mapQ$V2 < 40)])#
	goodQual <- sum(mapQ$propMapQ[which(mapQ$V2 >= 40)])#
	par(pin=c(1,1.2), mar=c(4,2,2,1))#
	barplot(c(badQual, goodQual), ylim=c(0,1), col=c(adjustcolor('red', 0.5)), adjustcolor('green', 0.5)), ylab="Proportion of Reads",  main=paste(samples[i], ' - Chromosome Y', sep=''), xlab='MapQ Score', names.arg=c('<40', '>=40'))#
}#
dev.off()
pdf('/Users/Jessica/Documents/USC/island_mice/plots/mapping/PropMapQ-per-chrom-goodQual.pdf', height=11, width=8.5)#
samples <- c('W01', 'W02', 'W03', 'W04', 'W05', 'W06', 'W07', 'W08', 'W09', 'W10', 'W11', 'W12', 'R01', 'R02', 'R04', 'R05', 'R06', 'R07', 'R08', 'R09', 'R10', 'R11', 'R12', 'R13')#
par(mfcol=c(6,4))#
for (i in 1:24){#
	f <- paste('/Users/Jessica/Documents/USC/island_mice/mapping-analysis/mapQ-per-chrom/BY_DNA-', i, '.chrY.mapQ-distribution', sep='')#
	mapQ <- read.table(f, head=FALSE)#
	# allReads <- sum(mapQ$V1)#
	allReads <- totalReads[21,i+2]#
	mapQ$propMapQ <- mapQ$V1/allReads#
	badQual <- sum(mapQ$propMapQ[which(mapQ$V2 < 40)])#
	goodQual <- sum(mapQ$propMapQ[which(mapQ$V2 >= 40)])#
	par(pin=c(1,1.2), mar=c(4,2,2,1))#
	barplot(c(badQual, goodQual), ylim=c(0,1), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="Proportion of Reads",  main=paste(samples[i], ' - Chromosome Y', sep=''), xlab='MapQ Score', names.arg=c('<40', '>=40'))#
}#
dev.off()
#plot good vs bad quality reads per chromsome (good >= 40, bad < 40)#
pdf('/Users/Jessica/Documents/USC/island_mice/plots/mapping/PropMapQ-per-chrom-goodQual.pdf', height=5, width=5)#
for (i in chroms){#
	f <- paste('/Users/Jessica/Documents/USC/island_mice/mapping-analysis/mapQ-per-chrom/allSamples.chr', i, '.mapQ-distribution', sep='')#
	mapQ <- read.table(f, head=FALSE)#
	allReads <- sum(mapQ$V2)#
	goodReads <- sum(mapQ[41:70,2])#
	propMapQ <- mapQ$V2/allReads#
	badQual <- sum(propMapQ[0:40])#
	goodQual <- sum(propMapQ[41:70])#
	barplot(c(badQual, goodQual), ylim=c(0,1), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="Proportion of Reads",  main=paste('Poor vs. Good MapQ - Chromosome ', i, sep=''), xlab='MapQ Score', names.arg=c('<40', '>=40'))#
}#
dev.off()
pdf('/Users/Jessica/Documents/USC/island_mice/plots/mapping/PropMapQ-per-sample-Y.pdf', height=11, width=8.5)#
samples <- c('W01', 'W02', 'W03', 'W04', 'W05', 'W06', 'W07', 'W08', 'W09', 'W10', 'W11', 'W12', 'R01', 'R02', 'R04', 'R05', 'R06', 'R07', 'R08', 'R09', 'R10', 'R11', 'R12', 'R13')#
par(mfcol=c(6,4))#
for (i in 1:24){#
	f <- paste('/Users/Jessica/Documents/USC/island_mice/mapping-analysis/mapQ-per-chrom/BY_DNA-', i, '.chrY.mapQ-distribution', sep='')#
	mapQ <- read.table(f, head=FALSE)#
	# allReads <- sum(mapQ$V1)#
	allReads <- totalReads[21,i+2]#
	mapQ$propMapQ <- mapQ$V1/allReads#
	badQual <- sum(mapQ$propMapQ[which(mapQ$V2 < 40)])#
	goodQual <- sum(mapQ$propMapQ[which(mapQ$V2 >= 40)])#
	par(pin=c(1,1.2), mar=c(4,2,2,1))#
	barplot(c(badQual, goodQual), ylim=c(0,1), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="Proportion of Reads",  main=paste(samples[i], ' - Chromosome Y', sep=''), xlab='MapQ Score', names.arg=c('<40', '>=40'))#
}#
dev.off()
pdf('/Users/Jessica/Documents/USC/island_mice/plots/mapping/Reads-per-sample-Y-mappedVsUnmapped.pdf', height=11, width=8.5)#
samples <- c('W01', 'W02', 'W03', 'W04', 'W05', 'W06', 'W07', 'W08', 'W09', 'W10', 'W11', 'W12', 'R01', 'R02', 'R04', 'R05', 'R06', 'R07', 'R08', 'R09', 'R10', 'R11', 'R12', 'R13')#
par(mfcol=c(6,4))#
for (i in 1:24){#
	allReads <- totalReads[21,i+2]#
	mapped <- totalReads[21,pairs[i]]#
	unmapped <- totalReads[21,pairs[i+1]]#
	par(pin=c(1,1.2), mar=c(4,2,2,1))#
	barplot(c(unmapped, mapped), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="No. of Reads",  main=paste(samples[i], ' - Chromosome Y', sep=''), names.arg=c('unampped', 'mapped'))#
}#
dev.off()
pdf('/Users/Jessica/Documents/USC/island_mice/plots/mapping/Reads-per-sample-Y-mappedVsUnmapped.pdf', height=11, width=8.5)#
samples <- c('W01', 'W02', 'W03', 'W04', 'W05', 'W06', 'W07', 'W08', 'W09', 'W10', 'W11', 'W12', 'R01', 'R02', 'R04', 'R05', 'R06', 'R07', 'R08', 'R09', 'R10', 'R11', 'R12', 'R13')#
par(mfcol=c(6,4))#
for (i in 1:24){#
	allReads <- totalReads[21,i+2]#
	mapped <- totalReads[21,pairs[i]]#
	unmapped <- totalReads[21,pairs[i+1]]#
	par(pin=c(1,1.2), mar=c(4,2,2,1))#
	barplot(c(unmapped, mapped), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="No. of Reads",  main=paste(samples[i], ' - Chromosome Y', sep=''), names.arg=c('unmapped', 'mapped'))#
}#
dev.off()
pdf('/Users/Jessica/Documents/USC/island_mice/plots/mapping/Reads-per-sample-Y-mappedVsUnmapped.pdf', height=11, width=8.5)#
samples <- c('W01', 'W02', 'W03', 'W04', 'W05', 'W06', 'W07', 'W08', 'W09', 'W10', 'W11', 'W12', 'R01', 'R02', 'R04', 'R05', 'R06', 'R07', 'R08', 'R09', 'R10', 'R11', 'R12', 'R13')#
par(mfcol=c(6,4))#
for (i in 1:24){#
	allReads <- totalReads[21,i+2]#
	mapped <- totalReads[21,pairs[i]]#
	unmapped <- totalReads[21,pairs[i+1]]#
	par(pin=c(1,1.2), mar=c(4,2,2,1))#
	barplot(c(unmapped, mapped), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="No. of Reads",  main=paste(samples[i], ' - Chromosome Y', sep=''))#, names.arg=c('unmapped', 'mapped'))#
}#
dev.off()
pdf('/Users/Jessica/Documents/USC/island_mice/plots/mapping/Reads-per-sample-Y-mappedVsUnmapped.pdf', height=11, width=8.5)#
samples <- c('W01', 'W02', 'W03', 'W04', 'W05', 'W06', 'W07', 'W08', 'W09', 'W10', 'W11', 'W12', 'R01', 'R02', 'R04', 'R05', 'R06', 'R07', 'R08', 'R09', 'R10', 'R11', 'R12', 'R13')#
par(mfcol=c(6,4))#
for (i in 1:24){#
	allReads <- totalReads[21,i+2]#
	mapped <- totalReads[21,pairs[i]]#
	unmapped <- totalReads[21,pairs[i+1]]#
	par(pin=c(1,1.2), mar=c(4,2,2,1))#
	barplot(c(unmapped, mapped), ylim=c(0,800000), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="No. of Reads",  main=paste(samples[i], ' - Chromosome Y', sep=''), names.arg=c('unmapped', 'mapped'))#
}#
dev.off()
pdf('/Users/Jessica/Documents/USC/island_mice/plots/mapping/Reads-per-sample-Y-mappedVsUnmapped.pdf', height=11, width=8.5)#
samples <- c('W01', 'W02', 'W03', 'W04', 'W05', 'W06', 'W07', 'W08', 'W09', 'W10', 'W11', 'W12', 'R01', 'R02', 'R04', 'R05', 'R06', 'R07', 'R08', 'R09', 'R10', 'R11', 'R12', 'R13')#
par(mfcol=c(6,4))#
for (i in 1:24){#
	allReads <- totalReads[21,i+2]#
	mapped <- totalReads[21,pairs[i]]#
	unmapped <- totalReads[21,pairs[i+1]]#
	par(pin=c(1,1.2), mar=c(4,2,2,1))#
	barplot(c(unmapped, mapped), ylim=c(0,800000), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="No. of Reads",  main=paste(samples[i], ' - Chromosome Y', sep='')) #names.arg=c('unmapped', 'mapped'))#
}#
dev.off()
unmapped
mapped
totalReads[21,pairs[1]]
totalReads[21,pairs[1+1]]
reads
pdf('/Users/Jessica/Documents/USC/island_mice/plots/mapping/Reads-per-sample-Y-mappedVsUnmapped.pdf', height=11, width=8.5)#
samples <- c('W01', 'W02', 'W03', 'W04', 'W05', 'W06', 'W07', 'W08', 'W09', 'W10', 'W11', 'W12', 'R01', 'R02', 'R04', 'R05', 'R06', 'R07', 'R08', 'R09', 'R10', 'R11', 'R12', 'R13')#
par(mfcol=c(6,4))#
for (i in 1:24){#
	mapped <- reads[40,pairs[i]]#
	unmapped <- reads[40,pairs[i+1]]#
	par(pin=c(1,1.2), mar=c(4,2,2,1))#
	barplot(c(unmapped, mapped), ylim=c(0,800000), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="No. of Reads",  main=paste(samples[i], ' - Chromosome Y', sep=''), names.arg=c('unmapped', 'mapped'))#
}#
dev.off()
mapped
unmapped
reads[40,pairs[1]]
reads[40,pairs[1+1]]
reads[40,pairs[1]+1]
pdf('/Users/Jessica/Documents/USC/island_mice/plots/mapping/Reads-per-sample-Y-mappedVsUnmapped.pdf', height=11, width=8.5)#
samples <- c('W01', 'W02', 'W03', 'W04', 'W05', 'W06', 'W07', 'W08', 'W09', 'W10', 'W11', 'W12', 'R01', 'R02', 'R04', 'R05', 'R06', 'R07', 'R08', 'R09', 'R10', 'R11', 'R12', 'R13')#
par(mfcol=c(6,4))#
for (i in 1:24){#
	mapped <- reads[40,pairs[i]]#
	unmapped <- reads[40,pairs[i]+1]#
	par(pin=c(1,1.2), mar=c(4,2,2,1))#
	barplot(c(unmapped, mapped), ylim=c(0,800000), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="No. of Reads",  main=paste(samples[i], ' - Chromosome Y', sep=''), names.arg=c('unmapped', 'mapped'))#
}#
dev.off()
pdf('/Users/Jessica/Documents/USC/island_mice/plots/mapping/Reads-per-sample-Y-mappedVsUnmapped.pdf', height=11, width=8.5)#
samples <- c('W01', 'W02', 'W03', 'W04', 'W05', 'W06', 'W07', 'W08', 'W09', 'W10', 'W11', 'W12', 'R01', 'R02', 'R04', 'R05', 'R06', 'R07', 'R08', 'R09', 'R10', 'R11', 'R12', 'R13')#
par(mfcol=c(6,4))#
for (i in 1:24){#
	mapped <- reads[40,pairs[i]]#
	unmapped <- reads[40,pairs[i]+1]#
	par(pin=c(1,1.2), mar=c(4,2,2,1))#
	barplot(c(unmapped, mapped), ylim=c(0,200000), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="No. of Reads",  main=paste(samples[i], ' - Chromosome Y', sep=''), names.arg=c('unmapped', 'mapped'))#
}#
dev.off()
pdf('/Users/Jessica/Documents/USC/island_mice/plots/mapping/PropMapQ-per-sample-X.pdf', height=11, width=8.5)#
samples <- c('W01', 'W02', 'W03', 'W04', 'W05', 'W06', 'W07', 'W08', 'W09', 'W10', 'W11', 'W12', 'R01', 'R02', 'R04', 'R05', 'R06', 'R07', 'R08', 'R09', 'R10', 'R11', 'R12', 'R13')#
par(mfcol=c(6,4))#
for (i in 1:24){#
	f <- paste('/Users/Jessica/Documents/USC/island_mice/mapping-analysis/mapQ-per-chrom/BY_DNA-', i, '.chrX.mapQ-distribution', sep='')#
	mapQ <- read.table(f, head=FALSE)#
	# allReads <- sum(mapQ$V1)#
	allReads <- totalReads[21,i+2]#
	mapQ$propMapQ <- mapQ$V1/allReads#
	badQual <- sum(mapQ$propMapQ[which(mapQ$V2 < 40)])#
	goodQual <- sum(mapQ$propMapQ[which(mapQ$V2 >= 40)])#
	par(pin=c(1,1.2), mar=c(4,2,2,1))#
	barplot(c(badQual, goodQual), ylim=c(0,1), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="Proportion of Reads",  main=paste(samples[i], ' - Chromosome Y', sep=''), xlab='MapQ Score', names.arg=c('<40', '>=40'))#
}#
dev.off()
#plot good vs bad quality reads per sample (good >= 40, bad < 40)#
#for the x chromosome#
pdf('/Users/Jessica/Documents/USC/island_mice/plots/mapping/PropMapQ-per-sample-X.pdf', height=11, width=8.5)#
samples <- c('W01', 'W02', 'W03', 'W04', 'W05', 'W06', 'W07', 'W08', 'W09', 'W10', 'W11', 'W12', 'R01', 'R02', 'R04', 'R05', 'R06', 'R07', 'R08', 'R09', 'R10', 'R11', 'R12', 'R13')#
par(mfcol=c(6,4))#
for (i in 1:24){#
	f <- paste('/Users/Jessica/Documents/USC/island_mice/mapping-analysis/mapQ-per-chrom/BY_DNA-', i, '.chrX.mapQ-distribution', sep='')#
	mapQ <- read.table(f, head=FALSE)#
	# allReads <- sum(mapQ$V1)#
	allReads <- totalReads[20,i+2]#
	mapQ$propMapQ <- mapQ$V1/allReads#
	badQual <- sum(mapQ$propMapQ[which(mapQ$V2 < 40)])#
	goodQual <- sum(mapQ$propMapQ[which(mapQ$V2 >= 40)])#
	par(pin=c(1,1.2), mar=c(4,2,2,1))#
	barplot(c(badQual, goodQual), ylim=c(0,1), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="Proportion of Reads",  main=paste(samples[i], ' - Chromosome X', sep=''), xlab='MapQ Score', names.arg=c('<40', '>=40'))#
}#
dev.off()
#plot num reads mapped vs. unmapped per sample#
# for the X chromosome#
pdf('/Users/Jessica/Documents/USC/island_mice/plots/mapping/Reads-per-sample-X-mappedVsUnmapped.pdf', height=11, width=8.5)#
samples <- c('W01', 'W02', 'W03', 'W04', 'W05', 'W06', 'W07', 'W08', 'W09', 'W10', 'W11', 'W12', 'R01', 'R02', 'R04', 'R05', 'R06', 'R07', 'R08', 'R09', 'R10', 'R11', 'R12', 'R13')#
par(mfcol=c(6,4))#
for (i in 1:24){#
	mapped <- reads[38,pairs[i]]#
	unmapped <- reads[38,pairs[i]+1]#
	par(pin=c(1,1.2), mar=c(4,2,2,1))#
	barplot(c(unmapped, mapped), ylim=c(0,200000), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="No. of Reads",  main=paste(samples[i], ' - Chromosome X', sep=''), names.arg=c('unmapped', 'mapped'))#
}#
dev.off()
# for the X chromosome#
pdf('/Users/Jessica/Documents/USC/island_mice/plots/mapping/Reads-per-sample-X-mappedVsUnmapped.pdf', height=11, width=8.5)#
samples <- c('W01', 'W02', 'W03', 'W04', 'W05', 'W06', 'W07', 'W08', 'W09', 'W10', 'W11', 'W12', 'R01', 'R02', 'R04', 'R05', 'R06', 'R07', 'R08', 'R09', 'R10', 'R11', 'R12', 'R13')#
par(mfcol=c(6,4))#
for (i in 1:24){#
	mapped <- reads[38,pairs[i]]#
	unmapped <- reads[38,pairs[i]+1]#
	par(pin=c(1,1.2), mar=c(4,2,2,1))#
	barplot(c(unmapped, mapped), ylim=c(0,500000), col=c(adjustcolor('red', 0.5), adjustcolor('green', 0.5)), ylab="No. of Reads",  main=paste(samples[i], ' - Chromosome X', sep=''), names.arg=c('unmapped', 'mapped'))#
}#
dev.off()
chroms <- c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', 'X', 'Y')#
chrLen <- c('195471971', '182113224', '160039680', '156508116', '151834684', '149736546', '145441459', '129401213', '124595110', '130694993', '122082543', '120129022', '120421639', '124902244', '104043685', '98207768', '94987271', '90702639', '61431566', '171031299', '91744698')#
samples <- c('chr_length', lapply(1:24, function(x) paste('BY_DNA-', x, sep='')))#
#
goodReads_perSample <- data.frame(matrix(data=NA, nrow=21, ncol=25))#
rownames(goodReads_perSample) <- chroms#
colnames(goodReads_perSample) <- samples#
goodReads_perSample[,1] <- as.numeric(chrLen)#
#
for (i in chroms){	#
	for (j in 1:24){#
		f <- paste('/Users/Jessica/Documents/USC/island_mice/mapping-analysis/mapQ-per-chrom/BY_DNA-', j, '.chr', i, '.mapQ-distribution', sep='')#
		mapQ <- read.table(f, head=FALSE)#
		readsGT40 <- sum(mapQ[41:nrow(mapQ),1])#
		# print(readsGT40)#
		goodReads_perSample[i,j+1] <- as.numeric(readsGT40)#
	}#
}#
propGoodReads_perSample <- goodReads_perSample[,2:25]/goodReads_perSample[,1]#
rownames(propGoodReads_perSample) <- chroms#
colnames(propGoodReads_perSample) <- samples[2:25]
head(propGoodReads_perSample)
tail(propGoodReads_perSample)
propAuto <- colsums(propGoodReads_perSample[1:19,])
propAuto <- colSums(propGoodReads_perSample[1:19,])
propAuto
propAuto <- colMeans(propGoodReads_perSample[1:19,])
propAuto
pdf('/Users/Jessica/Documents/USC/island_mice/plots/mapping/PropGoodReads-perSample-X-auto-Y.pdf', height=11, width=8.5)#
par(mfcol=c(6,4))#
for (i in 1:24){#
	par(pin=c(1,1.2), mar=c(4,2,2,1))#
	barplot(c(propAuto[i,], propGoodReads_perSample[20,i], propGoodReads_perSample[21,1]), ylim=c(0,1), ylab="No. Reads >=40/chrLength",  main=samples[i], names.arg=c('Autosomes', 'X', 'Y'))#
}#
dev.off()
propAuto
pdf('/Users/Jessica/Documents/USC/island_mice/plots/mapping/PropGoodReads-perSample-X-auto-Y.pdf', height=11, width=8.5)#
par(mfcol=c(6,4))#
for (i in 1:24){#
	par(pin=c(1,1.2), mar=c(4,2,2,1))#
	barplot(c(propAuto[i], propGoodReads_perSample[20,i], propGoodReads_perSample[21,1]), ylim=c(0,1), ylab="No. Reads >=40/chrLength",  main=samples[i], names.arg=c('Autosomes', 'X', 'Y'))#
}#
dev.off()
pdf('/Users/Jessica/Documents/USC/island_mice/plots/mapping/PropGoodReads-perSample-X-auto-Y.pdf', height=11, width=8.5)#
par(mfcol=c(6,4))#
for (i in 1:24){#
	par(pin=c(1,1.2), mar=c(4,2,2,1))#
	barplot(c(propAuto[i], propGoodReads_perSample[20,i], propGoodReads_perSample[21,1]), ylim=c(0,0.005), ylab="No. Reads >=40/chrLength",  main=samples[i], names.arg=c('Autosomes', 'X', 'Y'))#
}#
dev.off()
propAuto <- colMeans(propGoodReads_perSample[1:19,])#
samples <- c('W01', 'W02', 'W03', 'W04', 'W05', 'W06', 'W07', 'W08', 'W09', 'W10', 'W11', 'W12', 'R01', 'R02', 'R04', 'R05', 'R06', 'R07', 'R08', 'R09', 'R10', 'R11', 'R12', 'R13')#
pdf('/Users/Jessica/Documents/USC/island_mice/plots/mapping/PropGoodReads-perSample-X-auto-Y.pdf', height=11, width=8.5)#
par(mfcol=c(6,4))#
for (i in 1:24){#
	par(pin=c(1,1.2), mar=c(4,2,2,1))#
	barplot(c(propAuto[i], propGoodReads_perSample[20,i], propGoodReads_perSample[21,1]), ylim=c(0,0.005), ylab="No. Reads >=40/chrLength",  main=samples[i], names.arg=c('Autosomes', 'X', 'Y'))#
}#
dev.off()
Sys.getenv('PATH')
Sys.getenv('PATH', names=TRUE)
chroms <- c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', 'X', 'Y')
chroms[1]
chroms[21]
chroms[0]
arrayID <- Sys.getenv('PBS')
arrayID
paste('array', arrayID, 'ID', sep='')
chroms[arrayID]
arrayID <- chroms[1]
arrayID
paste('array', arrayID, 'ID', sep='')
i <- chroms[arrayID]
i
i <- chroms[as.numeric(arrayID)]
i
paste('array', arrayID, 'ID', sep='')
wpos <- c(1, 2, 3, 4, 5)
wpos
meanPi <- c(0.1, 0.2, 0.3, 0.4, 0.5)
meanPi
cbind(wpos, meanPi)
x <- cbind(wpos, meanPi)
write.table(x, '/Users/Jessica/Desktop/test.txt', rownames=FALSE)
write.table(x, '/Users/Jessica/Desktop/test.txt', row.names=FALSE)
chroms <- c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', 'X', 'Y')#
#
pdf('/Users/Jessica/Documents/USC/island_mice/plots/new-pairwise-pi/meanPi-weighted-within-btwn.pdf', height=4, width=30)#
for (i in chroms){#
	f <- paste('/Users/Jessica/Documents/USC/island_mice/new-pairwise-pi/meanPis-within-btwn/chr', i, '.txt', sep='')#
	pis <- read.table(f, head=TRUE)#
	plot(pis$pos, pis$meanPiRat, type='l', col=adjustcolor('red', 0.5), main=paste('Mean Weighted Pis - Chromosome', i, sep=' '), ylab='Mean Weighted Pi', xlab='Window Center')#
	lines(pis$pos, pis$meanPiWhit, col=adjustcolor('blue', 0.5))#
	lines(pis$pos, pis$meanPiBtwn, col=adjustcolor('green', 0.5))#
	legend(topright, c('Within Rat', 'Within Whit', 'Between'), lty=1, col=c('red', 'blue', 'green'))#
}#
dev.off()
chroms <- c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', 'X', 'Y')#
#
pdf('/Users/Jessica/Documents/USC/island_mice/plots/new-pairwise-pi/meanPi-weighted-within-btwn.pdf', height=4, width=30)#
for (i in chroms){#
	f <- paste('/Users/Jessica/Documents/USC/island_mice/new-pairwise-pi/meanPis-within-btwn/chr', i, '.txt', sep='')#
	pis <- read.table(f, head=TRUE)#
	plot(pis$pos, pis$meanPiRat, type='l', col=adjustcolor('red', 0.5), main=paste('Mean Weighted Pis - Chromosome', i, sep=' '), ylab='Mean Weighted Pi', xlab='Window Center')#
	lines(pis$pos, pis$meanPiWhit, col=adjustcolor('blue', 0.5))#
	lines(pis$pos, pis$meanPiBtwn, col=adjustcolor('green', 0.5))#
	legend(top right, c('Within Rat', 'Within Whit', 'Between'), lty=1, col=c('red', 'blue', 'green'))#
}#
dev.off()
chroms <- c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', 'X', 'Y')#
#
pdf('/Users/Jessica/Documents/USC/island_mice/plots/new-pairwise-pi/meanPi-weighted-within-btwn.pdf', height=4, width=30)#
for (i in chroms){#
	f <- paste('/Users/Jessica/Documents/USC/island_mice/new-pairwise-pi/meanPis-within-btwn/chr', i, '.txt', sep='')#
	pis <- read.table(f, head=TRUE)#
	plot(pis$pos, pis$meanPiRat, type='l', col=adjustcolor('red', 0.5), main=paste('Mean Weighted Pis - Chromosome', i, sep=' '), ylab='Mean Weighted Pi', xlab='Window Center')#
	lines(pis$pos, pis$meanPiWhit, col=adjustcolor('blue', 0.5))#
	lines(pis$pos, pis$meanPiBtwn, col=adjustcolor('green', 0.5))#
	legend('topright', c('Within Rat', 'Within Whit', 'Between'), lty=1, col=c('red', 'blue', 'green'))#
}#
dev.off()
chroms <- c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', 'X', 'Y')#
#
pdf('/Users/Jessica/Documents/USC/island_mice/plots/new-pairwise-pi/meanPi-weighted-within-btwn.pdf', height=4, width=30)#
for (i in chroms){#
	f <- paste('/Users/Jessica/Documents/USC/island_mice/new-pairwise-pi/meanPis-within-btwn/chr', i, '.txt', sep='')#
	pis <- read.table(f, head=TRUE)#
	plot(pis$pos, pis$meanPiRat, type='l', col=adjustcolor('red', 0.5), main=paste('Mean Weighted Pis - Chromosome', i, sep=' '), ylab='Mean Weighted Pi', xlab='Window Center', ylim=c(0,1))#
	lines(pis$pos, pis$meanPiWhit, col=adjustcolor('blue', 0.5))#
	lines(pis$pos, pis$meanPiBtwn, col=adjustcolor('green', 0.5))#
	legend('topright', c('Within Rat', 'Within Whit', 'Between'), lty=1, col=c('red', 'blue', 'green'))#
}#
dev.off()
chroms <- c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', 'X', 'Y')#
#
pdf('/Users/Jessica/Documents/USC/island_mice/plots/new-pairwise-pi/meanPi-weighted-within-btwn.pdf', height=4, width=30)#
for (i in chroms){#
	f <- paste('/Users/Jessica/Documents/USC/island_mice/new-pairwise-pi/meanPis-within-btwn/chr', i, '.txt', sep='')#
	pis <- read.table(f, head=TRUE)#
	plot(pis$pos, pis$meanPiRat, type='l', col=adjustcolor('red', 0.5), main=paste('Mean Weighted Pis - Chromosome', i, sep=' '), ylab='Mean Weighted Pi', xlab='Window Center', ylim=c(0,1))#
	lines(pis$pos, pis$meanPiWhit, col=adjustcolor('blue', 0.5))#
	lines(pis$pos, pis$meanPiBtwn, col=adjustcolor('purple', 0.5))#
	legend('topright', c('Within Rat', 'Within Whit', 'Between'), lty=1, col=c('red', 'blue', 'green'))#
}#
dev.off()
chroms <- c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', 'X', 'Y')#
#
pdf('/Users/Jessica/Documents/USC/island_mice/plots/new-pairwise-pi/meanPi-weighted-within-btwn.pdf', height=4, width=30)#
for (i in chroms){#
	f <- paste('/Users/Jessica/Documents/USC/island_mice/new-pairwise-pi/meanPis-within-btwn/chr', i, '.txt', sep='')#
	pis <- read.table(f, head=TRUE)#
	plot(pis$pos, pis$meanPiRat, type='l', col=adjustcolor('red', 0.5), main=paste('Mean Weighted Pis - Chromosome', i, sep=' '), ylab='Mean Weighted Pi', xlab='Window Center', ylim=c(0,1))#
	lines(pis$pos, pis$meanPiWhit, col=adjustcolor('blue', 0.5))#
	lines(pis$pos, pis$meanPiBtwn, col=adjustcolor('dark green', 0.5))#
	legend('topright', c('Within Rat', 'Within Whit', 'Between'), lty=1, col=c('red', 'blue', 'green'))#
}#
dev.off()
chroms <- c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', 'X', 'Y')#
#
pdf('/Users/Jessica/Documents/USC/island_mice/plots/new-pairwise-pi/meanPi-weighted-within-btwn.pdf', height=4, width=30)#
for (i in chroms){#
	f <- paste('/Users/Jessica/Documents/USC/island_mice/new-pairwise-pi/meanPis-within-btwn/chr', i, '.txt', sep='')#
	pis <- read.table(f, head=TRUE)#
	plot(pis$pos, pis$meanPiRat, type='l', col=adjustcolor('red', 0.5), main=paste('Mean Weighted Pis - Chromosome', i, sep=' '), ylab='Mean Weighted Pi', xlab='Window Center', ylim=c(0,1))#
	lines(pis$pos, pis$meanPiWhit, col=adjustcolor('blue', 0.5))#
	lines(pis$pos, pis$meanPiBtwn, col=adjustcolor('dark green', 0.5))#
	legend('topright', c('Within Rat', 'Within Whit', 'Between'), lty=1, col=c('red', 'blue', 'dark green'))#
}#
dev.off()
chroms <- c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', 'X', 'Y')#
#
pdf('/Users/Jessica/Documents/USC/island_mice/plots/new-pairwise-pi/meanPi-weighted-within-btwn.pdf', height=4, width=30)#
for (i in chroms){#
	f <- paste('/Users/Jessica/Documents/USC/island_mice/new-pairwise-pi/meanPis-within-btwn/chr', i, '.txt', sep='')#
	pis <- read.table(f, head=TRUE)#
	plot(pis$pos, pis$meanPiRat, type='l', col=adjustcolor('red', 0.5), main=paste('Mean Weighted Pis - Chromosome', i, sep=' '), ylab='Mean Weighted Pi', xlab='Window Center', ylim=c(0.1,0.7))#
	lines(pis$pos, pis$meanPiWhit, col=adjustcolor('blue', 0.5))#
	lines(pis$pos, pis$meanPiBtwn, col=adjustcolor('dark green', 0.5))#
	legend('topright', c('Within Rat', 'Within Whit', 'Between'), lty=1, col=c('red', 'blue', 'dark green'))#
}#
dev.off()
chroms <- c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', 'X', 'Y')#
#
for (pop in c('Rat', 'Whit')){#
	for (x in chroms){#
		pdf(paste('/Users/Jessica/Documents/USC/island_mice/plots/new-pairwise-pi/within',pop,'/each_Ind_perChrom-lowess/chr',x, '.pdf' ,sep=''), height=5, width=30)#
		fpop <- paste('/Users/Jessica/Documents/USC/island_mice/new-pairwise-pi/minInd2-withCounts/',pop,'_chr',x, '.pvar0.001.minInd2.pwp.gz', sep='')#
		fWeights <- paste('/Users/Jessica/Documents/USC/island_mice/new-pairwise-pi/minInd2-withCounts/',pop,'_chr',x, '.pvar0.001.minInd2.c.pwWeight.gz', sep='')#
		cat('reading pis ', pop, ' chrom ', x, '\n')#
		popPis <- read.table(fpop, head=TRUE)#
		cat('reading weights ', pop, ' chrom ', x, '\n')#
		popWeights <- read.table(fWeights, head=TRUE)#
		nInd <- 12#
		cols <- adjustcolor(rainbow(nInd-1), 0.5)#
		winWeightedPis <- c()#
		win <- 100000#
		step <- 30000#
		start <- seq(min(popPis$position), max(popPis$position), step)#
		end <- start+win-1#
		wpos <- round(start+(win/2))#
		cat('getting window pis for chrom ', x, '\n')#
		for (y in 1:length(start)){#
			ypos <- which(popPis$position>=start[y] & popPis$position<=end[y])#
			winWeightedPis <- rbind(winWeightedPis, colSums(popPis[ypos,3:68]*popWeights[ypos,])/colSums(popWeights[ypos,]))#
		}#
		for (i in 1:nInd){#
			pairingsi <- which(grepl(paste('X',i,'.',sep=''), colnames(popPis), fixed=TRUE) | grepl(paste('\\.',i,'\\b',sep=''), colnames(popPis)))-2 #which()-2 to make column indicies match winPis (popPis has two extra columns)#
			winPisi <- winWeightedPis[,pairingsi]#
			# quartz()#
			cat('plotting weighted pis chrom ', x, '\n')#
			par(mai=c(1.02,0.82,0.82,1.2))#
			plot(lowess(wpos, winPisi[,1], f=10000/length(wpos)), type="l", col=cols[1], main=paste(pop, ' Chromosome ', x, ', Individual ', i, sep=''), xlab='Window Center', ylab='Weighted Pi', ylim=c(0,1))#
			indivs <- grep(i, c(1:12), invert=TRUE, fixed=TRUE)#
			indivsLegend <- lapply(indivs, function (x) paste('ind. ', x, sep=''))#
			legend(max(popPis$position), 1, indivsLegend, lty=1, col=cols, xpd=TRUE)#
			for (j in 2:nInd-1){#
				lines(lowess(wpos, winPisi[,j], f=10000/length(wpos), type="l", col=cols[j])#
			}#
		}#
		dev.off()#
	}#
}
chroms <- c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', 'X', 'Y')#
#
for (pop in c('Rat', 'Whit')){#
	for (x in chroms){#
		pdf(paste('/Users/Jessica/Documents/USC/island_mice/plots/new-pairwise-pi/within',pop,'/each_Ind_perChrom-lowess/chr',x, '.pdf' ,sep=''), height=5, width=30)#
		fpop <- paste('/Users/Jessica/Documents/USC/island_mice/new-pairwise-pi/minInd2-withCounts/',pop,'_chr',x, '.pvar0.001.minInd2.pwp.gz', sep='')#
		fWeights <- paste('/Users/Jessica/Documents/USC/island_mice/new-pairwise-pi/minInd2-withCounts/',pop,'_chr',x, '.pvar0.001.minInd2.c.pwWeight.gz', sep='')#
		cat('reading pis ', pop, ' chrom ', x, '\n')#
		popPis <- read.table(fpop, head=TRUE)#
		cat('reading weights ', pop, ' chrom ', x, '\n')#
		popWeights <- read.table(fWeights, head=TRUE)#
		nInd <- 12#
		cols <- adjustcolor(rainbow(nInd-1), 0.5)#
		winWeightedPis <- c()#
		win <- 100000#
		step <- 30000#
		start <- seq(min(popPis$position), max(popPis$position), step)#
		end <- start+win-1#
		wpos <- round(start+(win/2))#
		cat('getting window pis for chrom ', x, '\n')#
		for (y in 1:length(start)){#
			ypos <- which(popPis$position>=start[y] & popPis$position<=end[y])#
			winWeightedPis <- rbind(winWeightedPis, colSums(popPis[ypos,3:68]*popWeights[ypos,])/colSums(popWeights[ypos,]))#
		}#
		for (i in 1:nInd){#
			pairingsi <- which(grepl(paste('X',i,'.',sep=''), colnames(popPis), fixed=TRUE) | grepl(paste('\\.',i,'\\b',sep=''), colnames(popPis)))-2 #which()-2 to make column indicies match winPis (popPis has two extra columns)#
			winPisi <- winWeightedPis[,pairingsi]#
			# quartz()#
			cat('plotting weighted pis chrom ', x, '\n')#
			par(mai=c(1.02,0.82,0.82,1.2))#
			plot(lowess(wpos, winPisi[,1], f=10000/length(wpos)), type="l", col=cols[1], main=paste(pop, ' Chromosome ', x, ', Individual ', i, sep=''), xlab='Window Center', ylab='Weighted Pi', ylim=c(0,1))#
			indivs <- grep(i, c(1:12), invert=TRUE, fixed=TRUE)#
			indivsLegend <- lapply(indivs, function (x) paste('ind. ', x, sep=''))#
			legend(max(popPis$position), 1, indivsLegend, lty=1, col=cols, xpd=TRUE)#
			for (j in 2:nInd-1){#
				lines(lowess(wpos, winPisi[,j], f=10000/length(wpos)), type="l", col=cols[j])#
			}#
		}#
		dev.off()#
	}
}
x
x <- 1
x
x <- '1'
x
pdf(paste('/Users/Jessica/Documents/USC/island_mice/plots/new-pairwise-pi/within',pop,'/each_Ind_perChrom-lowess/chr',x, '-f5000.pdf' ,sep=''), height=5, width=30)
for (i in 1:nInd){#
			pairingsi <- which(grepl(paste('X',i,'.',sep=''), colnames(popPis), fixed=TRUE) | grepl(paste('\\.',i,'\\b',sep=''), colnames(popPis)))-2 #which()-2 to make column indicies match winPis (popPis has two extra columns)#
			winPisi <- winWeightedPis[,pairingsi]#
			# quartz()#
			cat('plotting weighted pis chrom ', x, '\n')#
			par(mai=c(1.02,0.82,0.82,1.2))#
			plot(lowess(wpos, winPisi[,1], f=10000/length(wpos)), type="l", col=cols[1], main=paste(pop, ' Chromosome ', x, ', Individual ', i, sep=''), xlab='Window Center', ylab='Weighted Pi', ylim=c(0,1))#
			indivs <- grep(i, c(1:12), invert=TRUE, fixed=TRUE)#
			indivsLegend <- lapply(indivs, function (x) paste('ind. ', x, sep=''))#
			legend(max(popPis$position), 1, indivsLegend, lty=1, col=cols, xpd=TRUE)#
			for (j in 2:nInd-1){#
				lines(lowess(wpos, winPisi[,j], f=10000/length(wpos)), type="l", col=cols[j])#
			}#
		}#
		dev.off()
pdf(paste('/Users/Jessica/Documents/USC/island_mice/plots/new-pairwise-pi/within',pop,'/each_Ind_perChrom-lowess/chr',x, '-f15000.pdf' ,sep=''), height=5, width=30)
for (i in 1:nInd){#
			pairingsi <- which(grepl(paste('X',i,'.',sep=''), colnames(popPis), fixed=TRUE) | grepl(paste('\\.',i,'\\b',sep=''), colnames(popPis)))-2 #which()-2 to make column indicies match winPis (popPis has two extra columns)#
			winPisi <- winWeightedPis[,pairingsi]#
			# quartz()#
			cat('plotting weighted pis chrom ', x, '\n')#
			par(mai=c(1.02,0.82,0.82,1.2))#
			plot(lowess(wpos, winPisi[,1], f=15000/length(wpos)), type="l", col=cols[1], main=paste(pop, ' Chromosome ', x, ', Individual ', i, sep=''), xlab='Window Center', ylab='Weighted Pi', ylim=c(0,1))#
			indivs <- grep(i, c(1:12), invert=TRUE, fixed=TRUE)#
			indivsLegend <- lapply(indivs, function (x) paste('ind. ', x, sep=''))#
			legend(max(popPis$position), 1, indivsLegend, lty=1, col=cols, xpd=TRUE)#
			for (j in 2:nInd-1){#
				lines(lowess(wpos, winPisi[,j], f=10000/length(wpos)), type="l", col=cols[j])#
			}#
		}#
		dev.off()
pdf(paste('/Users/Jessica/Documents/USC/island_mice/plots/new-pairwise-pi/within',pop,'/each_Ind_perChrom-lowess/chr',x, '-f5000.pdf' ,sep=''), height=5, width=30)
for (i in 1:nInd){#
			pairingsi <- which(grepl(paste('X',i,'.',sep=''), colnames(popPis), fixed=TRUE) | grepl(paste('\\.',i,'\\b',sep=''), colnames(popPis)))-2 #which()-2 to make column indicies match winPis (popPis has two extra columns)#
			winPisi <- winWeightedPis[,pairingsi]#
			# quartz()#
			cat('plotting weighted pis chrom ', x, '\n')#
			par(mai=c(1.02,0.82,0.82,1.2))#
			plot(lowess(wpos, winPisi[,1], f=5000/length(wpos)), type="l", col=cols[1], main=paste(pop, ' Chromosome ', x, ', Individual ', i, sep=''), xlab='Window Center', ylab='Weighted Pi', ylim=c(0,1))#
			indivs <- grep(i, c(1:12), invert=TRUE, fixed=TRUE)#
			indivsLegend <- lapply(indivs, function (x) paste('ind. ', x, sep=''))#
			legend(max(popPis$position), 1, indivsLegend, lty=1, col=cols, xpd=TRUE)#
			for (j in 2:nInd-1){#
				lines(lowess(wpos, winPisi[,j], f=10000/length(wpos)), type="l", col=cols[j])#
			}#
		}#
		dev.off()
pdf(paste('/Users/Jessica/Documents/USC/island_mice/plots/new-pairwise-pi/within',pop,'/each_Ind_perChrom-lowess/chr',x, '-f5000.pdf' ,sep=''), height=5, width=30)
for (i in 1:nInd){#
			pairingsi <- which(grepl(paste('X',i,'.',sep=''), colnames(popPis), fixed=TRUE) | grepl(paste('\\.',i,'\\b',sep=''), colnames(popPis)))-2 #which()-2 to make column indicies match winPis (popPis has two extra columns)#
			winPisi <- winWeightedPis[,pairingsi]#
			# quartz()#
			cat('plotting weighted pis chrom ', x, '\n')#
			par(mai=c(1.02,0.82,0.82,1.2))#
			plot(lowess(wpos, winPisi[,1], f=5000/length(wpos)), type="l", col=cols[1], main=paste(pop, ' Chromosome ', x, ', Individual ', i, sep=''), xlab='Window Center', ylab='Weighted Pi', ylim=c(0,1))#
			indivs <- grep(i, c(1:12), invert=TRUE, fixed=TRUE)#
			indivsLegend <- lapply(indivs, function (x) paste('ind. ', x, sep=''))#
			legend(max(popPis$position), 1, indivsLegend, lty=1, col=cols, xpd=TRUE)#
			for (j in 2:nInd-1){#
				lines(lowess(wpos, winPisi[,j], f=5000/length(wpos)), type="l", col=cols[j])#
			}#
		}#
		dev.off()
pdf(paste('/Users/Jessica/Documents/USC/island_mice/plots/new-pairwise-pi/within',pop,'/each_Ind_perChrom-lowess/chr',x, '-f15000.pdf' ,sep=''), height=5, width=30)
for (i in 1:nInd){#
			pairingsi <- which(grepl(paste('X',i,'.',sep=''), colnames(popPis), fixed=TRUE) | grepl(paste('\\.',i,'\\b',sep=''), colnames(popPis)))-2 #which()-2 to make column indicies match winPis (popPis has two extra columns)#
			winPisi <- winWeightedPis[,pairingsi]#
			# quartz()#
			cat('plotting weighted pis chrom ', x, '\n')#
			par(mai=c(1.02,0.82,0.82,1.2))#
			plot(lowess(wpos, winPisi[,1], f=15000/length(wpos)), type="l", col=cols[1], main=paste(pop, ' Chromosome ', x, ', Individual ', i, sep=''), xlab='Window Center', ylab='Weighted Pi', ylim=c(0,1))#
			indivs <- grep(i, c(1:12), invert=TRUE, fixed=TRUE)#
			indivsLegend <- lapply(indivs, function (x) paste('ind. ', x, sep=''))#
			legend(max(popPis$position), 1, indivsLegend, lty=1, col=cols, xpd=TRUE)#
			for (j in 2:nInd-1){#
				lines(lowess(wpos, winPisi[,j], f=15000/length(wpos)), type="l", col=cols[j])#
			}#
		}#
		dev.off()
pdf(paste('/Users/Jessica/Documents/USC/island_mice/plots/new-pairwise-pi/within',pop,'/each_Ind_perChrom-lowess/chr',x, '-f50000.pdf' ,sep=''), height=5, width=30)
for (i in 1:nInd){#
			pairingsi <- which(grepl(paste('X',i,'.',sep=''), colnames(popPis), fixed=TRUE) | grepl(paste('\\.',i,'\\b',sep=''), colnames(popPis)))-2 #which()-2 to make column indicies match winPis (popPis has two extra columns)#
			winPisi <- winWeightedPis[,pairingsi]#
			# quartz()#
			cat('plotting weighted pis chrom ', x, '\n')#
			par(mai=c(1.02,0.82,0.82,1.2))#
			plot(lowess(wpos, winPisi[,1], f=50000/length(wpos)), type="l", col=cols[1], main=paste(pop, ' Chromosome ', x, ', Individual ', i, sep=''), xlab='Window Center', ylab='Weighted Pi', ylim=c(0,1))#
			indivs <- grep(i, c(1:12), invert=TRUE, fixed=TRUE)#
			indivsLegend <- lapply(indivs, function (x) paste('ind. ', x, sep=''))#
			legend(max(popPis$position), 1, indivsLegend, lty=1, col=cols, xpd=TRUE)#
			for (j in 2:nInd-1){#
				lines(lowess(wpos, winPisi[,j], f=50000/length(wpos)), type="l", col=cols[j])#
			}#
		}#
		dev.off()
length(wpos)
pdf(paste('/Users/Jessica/Documents/USC/island_mice/plots/new-pairwise-pi/within',pop,'/each_Ind_perChrom-lowess/chr',x, '-f50.pdf' ,sep=''), height=5, width=30)
for (i in 1:nInd){#
			pairingsi <- which(grepl(paste('X',i,'.',sep=''), colnames(popPis), fixed=TRUE) | grepl(paste('\\.',i,'\\b',sep=''), colnames(popPis)))-2 #which()-2 to make column indicies match winPis (popPis has two extra columns)#
			winPisi <- winWeightedPis[,pairingsi]#
			# quartz()#
			cat('plotting weighted pis chrom ', x, '\n')#
			par(mai=c(1.02,0.82,0.82,1.2))#
			plot(lowess(wpos, winPisi[,1], f=50/length(wpos)), type="l", col=cols[1], main=paste(pop, ' Chromosome ', x, ', Individual ', i, sep=''), xlab='Window Center', ylab='Weighted Pi', ylim=c(0,1))#
			indivs <- grep(i, c(1:12), invert=TRUE, fixed=TRUE)#
			indivsLegend <- lapply(indivs, function (x) paste('ind. ', x, sep=''))#
			legend(max(popPis$position), 1, indivsLegend, lty=1, col=cols, xpd=TRUE)#
			for (j in 2:nInd-1){#
				lines(lowess(wpos, winPisi[,j], f=50/length(wpos)), type="l", col=cols[j])#
			}#
		}#
		dev.off()
pdf(paste('/Users/Jessica/Documents/USC/island_mice/plots/new-pairwise-pi/within',pop,'/each_Ind_perChrom-lowess/chr',x, '-f100.pdf' ,sep=''), height=5, width=30)
for (i in 1:nInd){#
			pairingsi <- which(grepl(paste('X',i,'.',sep=''), colnames(popPis), fixed=TRUE) | grepl(paste('\\.',i,'\\b',sep=''), colnames(popPis)))-2 #which()-2 to make column indicies match winPis (popPis has two extra columns)#
			winPisi <- winWeightedPis[,pairingsi]#
			# quartz()#
			cat('plotting weighted pis chrom ', x, '\n')#
			par(mai=c(1.02,0.82,0.82,1.2))#
			plot(lowess(wpos, winPisi[,1], f=100/length(wpos)), type="l", col=cols[1], main=paste(pop, ' Chromosome ', x, ', Individual ', i, sep=''), xlab='Window Center', ylab='Weighted Pi', ylim=c(0,1))#
			indivs <- grep(i, c(1:12), invert=TRUE, fixed=TRUE)#
			indivsLegend <- lapply(indivs, function (x) paste('ind. ', x, sep=''))#
			legend(max(popPis$position), 1, indivsLegend, lty=1, col=cols, xpd=TRUE)#
			for (j in 2:nInd-1){#
				lines(lowess(wpos, winPisi[,j], f=100/length(wpos)), type="l", col=cols[j])#
			}#
		}#
		dev.off()
pdf(paste('/Users/Jessica/Documents/USC/island_mice/plots/new-pairwise-pi/within',pop,'/each_Ind_perChrom-lowess/chr',x, '-f25.pdf' ,sep=''), height=5, width=30)
for (i in 1:nInd){#
			pairingsi <- which(grepl(paste('X',i,'.',sep=''), colnames(popPis), fixed=TRUE) | grepl(paste('\\.',i,'\\b',sep=''), colnames(popPis)))-2 #which()-2 to make column indicies match winPis (popPis has two extra columns)#
			winPisi <- winWeightedPis[,pairingsi]#
			# quartz()#
			cat('plotting weighted pis chrom ', x, '\n')#
			par(mai=c(1.02,0.82,0.82,1.2))#
			plot(lowess(wpos, winPisi[,1], f=25/length(wpos)), type="l", col=cols[1], main=paste(pop, ' Chromosome ', x, ', Individual ', i, sep=''), xlab='Window Center', ylab='Weighted Pi', ylim=c(0,1))#
			indivs <- grep(i, c(1:12), invert=TRUE, fixed=TRUE)#
			indivsLegend <- lapply(indivs, function (x) paste('ind. ', x, sep=''))#
			legend(max(popPis$position), 1, indivsLegend, lty=1, col=cols, xpd=TRUE)#
			for (j in 2:nInd-1){#
				lines(lowess(wpos, winPisi[,j], f=25/length(wpos)), type="l", col=cols[j])#
			}#
		}#
		dev.off()
pdf(paste('/Users/Jessica/Documents/USC/island_mice/plots/new-pairwise-pi/within',pop,'/each_Ind_perChrom-lowess/chr',x, '-f10.pdf' ,sep=''), height=5, width=30)
for (i in 1:nInd){#
			pairingsi <- which(grepl(paste('X',i,'.',sep=''), colnames(popPis), fixed=TRUE) | grepl(paste('\\.',i,'\\b',sep=''), colnames(popPis)))-2 #which()-2 to make column indicies match winPis (popPis has two extra columns)#
			winPisi <- winWeightedPis[,pairingsi]#
			# quartz()#
			cat('plotting weighted pis chrom ', x, '\n')#
			par(mai=c(1.02,0.82,0.82,1.2))#
			plot(lowess(wpos, winPisi[,1], f=10/length(wpos)), type="l", col=cols[1], main=paste(pop, ' Chromosome ', x, ', Individual ', i, sep=''), xlab='Window Center', ylab='Weighted Pi', ylim=c(0,1))#
			indivs <- grep(i, c(1:12), invert=TRUE, fixed=TRUE)#
			indivsLegend <- lapply(indivs, function (x) paste('ind. ', x, sep=''))#
			legend(max(popPis$position), 1, indivsLegend, lty=1, col=cols, xpd=TRUE)#
			for (j in 2:nInd-1){#
				lines(lowess(wpos, winPisi[,j], f=10/length(wpos)), type="l", col=cols[j])#
			}#
		}#
		dev.off()
pdf(paste('/Users/Jessica/Documents/USC/island_mice/plots/new-pairwise-pi/within',pop,'/each_Ind_perChrom-lowess/chr',x, '-f3.pdf' ,sep=''), height=5, width=30)
for (i in 1:nInd){#
			pairingsi <- which(grepl(paste('X',i,'.',sep=''), colnames(popPis), fixed=TRUE) | grepl(paste('\\.',i,'\\b',sep=''), colnames(popPis)))-2 #which()-2 to make column indicies match winPis (popPis has two extra columns)#
			winPisi <- winWeightedPis[,pairingsi]#
			# quartz()#
			cat('plotting weighted pis chrom ', x, '\n')#
			par(mai=c(1.02,0.82,0.82,1.2))#
			plot(lowess(wpos, winPisi[,1], f=3/length(wpos)), type="l", col=cols[1], main=paste(pop, ' Chromosome ', x, ', Individual ', i, sep=''), xlab='Window Center', ylab='Weighted Pi', ylim=c(0,1))#
			indivs <- grep(i, c(1:12), invert=TRUE, fixed=TRUE)#
			indivsLegend <- lapply(indivs, function (x) paste('ind. ', x, sep=''))#
			legend(max(popPis$position), 1, indivsLegend, lty=1, col=cols, xpd=TRUE)#
			for (j in 2:nInd-1){#
				lines(lowess(wpos, winPisi[,j], f=3/length(wpos)), type="l", col=cols[j])#
			}#
		}#
		dev.off()
chroms <- c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', 'X', 'Y')#
#
pdf('/Users/Jessica/Documents/USC/island_mice/plots/new-pairwise-pi/meanPi-weighted-within-btwn.pdf', height=4, width=30)#
for (i in chroms){#
	f <- paste('/Users/Jessica/Documents/USC/island_mice/new-pairwise-pi/meanPis-within-btwn/chr', i, '.txt', sep='')#
	pis <- read.table(f, head=TRUE)#
	plot(pis$pos, pis$meanPiRat, type='l', col=adjustcolor('red', 0.5), main=paste('Mean Weighted Pis - Chromosome', i, sep=' '), ylab='Mean Weighted Pi', xlab='Window Center', ylim=c(0.1,0.7))#
	lines(pis$pos, pis$meanPiWhit, col=adjustcolor('blue', 0.5))#
	lines(pis$pos, pis$meanPiBtwn, col=adjustcolor('dark green', 0.5))#
	legend('topright', c('Within Rat', 'Within Whit', 'Between'), lty=1, col=c('red', 'blue', 'dark green'))#
}#
dev.off()
pdf(paste('/Users/Jessica/Documents/USC/island_mice/plots/new-pairwise-pi/within',pop,'/each_Ind_perChrom-lowess/chr',x, '-f0.01.pdf' ,sep=''), height=5, width=30)
for (i in 1:nInd){#
			pairingsi <- which(grepl(paste('X',i,'.',sep=''), colnames(popPis), fixed=TRUE) | grepl(paste('\\.',i,'\\b',sep=''), colnames(popPis)))-2 #which()-2 to make column indicies match winPis (popPis has two extra columns)#
			winPisi <- winWeightedPis[,pairingsi]#
			# quartz()#
			cat('plotting weighted pis chrom ', x, '\n')#
			par(mai=c(1.02,0.82,0.82,1.2))#
			plot(lowess(wpos, winPisi[,1], f=0.01), type="l", col=cols[1], main=paste(pop, ' Chromosome ', x, ', Individual ', i, sep=''), xlab='Window Center', ylab='Weighted Pi', ylim=c(0,1))#
			indivs <- grep(i, c(1:12), invert=TRUE, fixed=TRUE)#
			indivsLegend <- lapply(indivs, function (x) paste('ind. ', x, sep=''))#
			legend(max(popPis$position), 1, indivsLegend, lty=1, col=cols, xpd=TRUE)#
			for (j in 2:nInd-1){#
				lines(lowess(wpos, winPisi[,j], f=0.01), type="l", col=cols[j])#
			}#
		}#
		dev.off()
rand.initfreqs <- 5*rexp(length(initfreqs))
nfreqs <- length(initfreqs)
rand.initfreqs <- 5*rexp(4)
rand.initfreqs
setwd('/Users/Jessica/Documents/USC/context/sims-tree-cpg/')
require(optparse)#
#
usage <- "\#
Infer parameters from output of sim-tree-cpg.R .\#
"#
#
option_list <- list(#
        make_option( c("-i","--infile"), type="character", default='selsims_seqlen_1000.RData', help=".RData file containing simulation." ),#
        make_option( c("-w","--win"), type="integer", default=1, help="Size of matching window. [default \"%default\"]" ),#
        make_option( c("-l","--lwin"), type="integer", default=2, help="Size of left-hand context. [default \"%default\"]" ),#
        make_option( c("-r","--rwin"), type="integer", default=2, help="Size of left-hand context. [default \"%default\"]" ),#
        make_option( c("-n","--nbatches"), type="integer", default=20, help="Number of MCMC batches. [default \"%default\"]" ),#
        make_option( c("-b","--blen"), type="integer", default=10, help="Length of each MCMC batch. [default \"%default\"]" ),#
        make_option( c("-s","--stepscale"), type="numeric", default=1e-4, help="Scale of proposal steps for Metropolis algorithm. [default \"%default\"]" ),#
        make_option( c("-m","--mmean"), type="double", default=1, help="Prior mean on single base mutation rates. [default \"%default\"]" ),#
        make_option( c("-c","--cpgmean"), type="double", default=1, help="Prior variance on CpG rate. [default \"%default\"]" ),#
        make_option( c("-p","--pprior"), type="double", default=1, help="Parameter for Dirichlet prior on base frequencies. [default \"%default\"]" ),#
        make_option( c("-v","--tprior"), type="double", default=.5, help="Parameter for Beta prior on branch length. [default \"%default\"]" ),#
        make_option( c("-d","--boundary"), type="character", default="none", help="Boundary conditions for generator matrix. [default \"%default\"]"),#
        make_option( c("-y","--meanboundary"), type="integer", default=0, help="Average over this many neighboring bases in computing generator matrix. [default \"%default\"]" ),#
        make_option( c("-g","--gmfile"), type="character", default="TRUE", help="File with precomputed generator matrix, or TRUE [default] to look for one. (otherwise, will compute)"),#
        make_option( c("-o","--logfile"), type="character", default="", help="Direct output to this file. [default appends .Rout]" )#
    )#
opt <- parse_args(OptionParser(option_list=option_list,description=usage))#
attach(opt)#
options(error=traceback)#
#
winlen <- lwin+win+rwin#
#
if (gmfile=="TRUE") { gmfile <- paste(paste("genmatrices/genmatrix",winlen,boundary,meanboundary,sep="-"),".RData",sep='') }#
#
if (is.null(infile)) { cat("Run\n  cpg-tree-inference.R -h\n for help.") }#
#
setwd('/Users/Jessica/Documents/USC/context/sims-cpg-tree')#
scriptdir <- "../"#
source(paste(scriptdir,"context-inference-fns.R",sep=''))#
source(paste(scriptdir,"sim-context-fns.R",sep=''))#
#
require(mcmc)#
#
load(infile)#
runinfo <- paste(lwin,win,rwin, sep='-')#
basedir <- gsub("RData",runinfo,infile,fixed=TRUE)#
if (!file.exists(basedir)) { dir.create(basedir) }#
basename <- paste(basedir,"/win-",lwin,"-",win,"-",rwin,sep='')#
datafile <- paste( basename ,"-results.RData",sep='')#
resultsfile <- paste( basename ,"-results.tsv",sep='')#
plotfile <- paste( basename ,"-plot",sep='')
initfreqs
rand.initfreqs <- rand.initfreqs/sum(rand.initfreqs)
rand.initfreqs
rexp(4)
rexp(4, 0.5)
rexp(4, 2)
5*rexp(4)
x - 5*rexp(4)
x <- 5*rexp(4)
x/sum(x)
y <- rexp(4)
y/sum(y)
sum(y/sum(y))
rexp(1, 5)
rexp(1, 10)
rexp(1, 10)
rexp(1, 10)
rexp(1, 10)
rexp(1, 10)
x <- rexp(1000, 1)
plot(x)
i <- 5*rexp(1000)
plot(i)
j <- rexp(1000)
plot(j)
plot(j)
plot(i)
plot(x)
plot(y)
z <- rexp(1000, 0.0001)
plot(z)
z <- rexp(1000, 10000)
plot(z)
require(optparse)#
#
usage <- "\#
Infer parameters from output of sim-tree-cpg.R .\#
"#
#
option_list <- list(#
        make_option( c("-i","--infile"), type="character", default='selsims_seqlen_1000.RData', help=".RData file containing simulation." ),#
        make_option( c("-w","--win"), type="integer", default=1, help="Size of matching window. [default \"%default\"]" ),#
        make_option( c("-l","--lwin"), type="integer", default=2, help="Size of left-hand context. [default \"%default\"]" ),#
        make_option( c("-r","--rwin"), type="integer", default=2, help="Size of left-hand context. [default \"%default\"]" ),#
        make_option( c("-n","--nbatches"), type="integer", default=20, help="Number of MCMC batches. [default \"%default\"]" ),#
        make_option( c("-b","--blen"), type="integer", default=10, help="Length of each MCMC batch. [default \"%default\"]" ),#
        make_option( c("-s","--stepscale"), type="numeric", default=1e-4, help="Scale of proposal steps for Metropolis algorithm. [default \"%default\"]" ),#
        make_option( c("-m","--mmean"), type="double", default=1, help="Prior mean on single base mutation rates. [default \"%default\"]" ),#
        make_option( c("-c","--cpgmean"), type="double", default=1, help="Prior variance on CpG rate. [default \"%default\"]" ),#
        make_option( c("-p","--pprior"), type="double", default=1, help="Parameter for Dirichlet prior on base frequencies. [default \"%default\"]" ),#
        make_option( c("-v","--tprior"), type="double", default=.5, help="Parameter for Beta prior on branch length. [default \"%default\"]" ),#
        make_option( c("-d","--boundary"), type="character", default="none", help="Boundary conditions for generator matrix. [default \"%default\"]"),#
        make_option( c("-y","--meanboundary"), type="integer", default=0, help="Average over this many neighboring bases in computing generator matrix. [default \"%default\"]" ),#
        make_option( c("-g","--gmfile"), type="character", default="TRUE", help="File with precomputed generator matrix, or TRUE [default] to look for one. (otherwise, will compute)"),#
        make_option( c("-o","--logfile"), type="character", default="", help="Direct output to this file. [default appends .Rout]" ),#
        make_option( c("-ne","--popsize"), type="integer", default="10000", help="Effective population size. [default \"%default\"]"  )#
    )#
#
opt <- parse_args(OptionParser(option_list=option_list,description=usage))#
attach(opt)#
options(error=traceback)#
#
winlen <- lwin+win+rwin#
#
if (gmfile=="TRUE") { gmfile <- paste(paste("genmatrices/genmatrix",winlen,boundary,meanboundary,sep="-"),".RData",sep='') }#
#
if (is.null(infile)) { cat("Run\n  cpg-tree-inference.R -h\n for help.") }#
#
setwd('/Users/Jessica/Documents/USC/context/sims-cpg-tree')#
scriptdir <- "../"#
source(paste(scriptdir,"context-inference-fns.R",sep=''))#
source(paste(scriptdir,"sim-context-fns.R",sep=''))
opt
load(infile)#
runinfo <- paste(lwin,win,rwin, sep='-')#
basedir <- gsub("RData",runinfo,infile,fixed=TRUE)#
if (!file.exists(basedir)) { dir.create(basedir) }#
basename <- paste(basedir,"/win-",lwin,"-",win,"-",rwin,sep='')#
datafile <- paste( basename ,"-results.RData",sep='')#
resultsfile <- paste( basename ,"-results.tsv",sep='')#
plotfile <- paste( basename ,"-plot",sep='')#
if (logfile=="") {#
    logfile <- gsub(".RData",".Rout",infile,fixed=TRUE)#
    logcon <- if (logfile=="-") { stdout() } else { file(paste(basedir,logfile,sep='/'),open="wt") }#
    sink(file=logcon, type="message", split=interactive()) #
    sink(file=logcon, type="output", split=interactive())   # send both to log file#
}#
#
if (file.exists(gmfile)) {#
    load(gmfile)#
} else {#
    if (meanboundary>0) {#
        genmatrix <- meangenmatrix( lwin=1, rwin=1, patlen=winlen, mutpats=mutpats, selpats=list(), mutrates=mutrates*tlen[1], selcoef=numeric(0), boundary=boundary )#
    } else {#
        genmatrix <- makegenmatrix( patlen=winlen, mutpats=mutpats, selpats=list(), mutrates=mutrates*tlen[1], selcoef=numeric(0), boundary=boundary )#
    }#
}#
projmatrix <- collapsepatmatrix( ipatterns=rownames(genmatrix), lwin=lwin, rwin=rwin )#
subtransmatrix <- computetransmatrix( genmatrix, projmatrix, names=TRUE )#
#
counts <- list(#
            "1.2"=counttrans( rownames(projmatrix), colnames(projmatrix), simseqs[[1]]$finalseq, simseqs[[2]]$finalseq, lwin=lwin ),#
            "2.1"=counttrans( rownames(projmatrix), colnames(projmatrix), simseqs[[2]]$finalseq, simseqs[[1]]$finalseq, lwin=lwin )#
        )#
# want only patterns that overlap little#
initcounts <- lapply( counts, rowSums )#
nonoverlapping <- lapply( seq_along(counts), function (k) ( leftchanged(rownames(counts[[k]]),colnames(counts[[k]]),lwin=lwin,win=win) & (initcounts[[k]]>0) ) )#
nov.counts <- lapply(seq_along(counts), function (k) counts[[k]][nonoverlapping[[k]]] )#
#
# move from base frequencies (what we estimate) to pattern frequencies#
nmuts <- length(mutpats)#
nfreqs <- length(nitfreqs <- rand.initfreqs/sum(rand.initfreqs)initfreqs)#
npats <- nrow(genmatrix)#
patcomp <- apply( do.call(rbind, strsplit(rownames(genmatrix),'') ), 2, match, bases )  # which base is at each position in each pattern
likfun <- function (params) {#
    # params are: tlen[1]/sum(tlen), sum(tlen)*mutrates, initfreqs#
    branchlens <- c(params[1],1-params[1])#
    mutrates <- params[1+(1:nmuts)]#
    initfreqs <- params[1+nmuts+(1:nfreqs)]#
    initfreqs <- initfreqs/sum(initfreqs)#
    patfreqs <- initfreqs[patcomp]#
    sel <- params[1+nmuts+(1:nfreqs)+1]#
    dim(patfreqs) <- dim(patcomp)#
    patfreqs <- apply( patfreqs, 1, prod )#
    # these are collapsed transition matrix#
    updownbranch <- list(  # note "up" branch is from simpler summaries#
            getupdowntrans( genmatrix, projmatrix, mutrates=list(mutrates,mutrates), selcoef=list(sel,popsize), initfreqs=patfreqs, tlens=rev(branchlens) ),#
            getupdowntrans( genmatrix, projmatrix, mutrates=list(mutrates,mutrates), selcoef=list(sel,popsize), initfreqs=patfreqs, tlens=branchlens )#
        )#
    if (any(sapply(updownbranch,function(x) any(!is.numeric(x))|any(x<0)))) { browser() }#
    # return negative log-likelihood plus a penalty to keep initfreqs summing to (almost) 1#
    return( #
                (-1) * ( sum( counts[[1]] * log(updownbranch[[1]]) ) + sum( counts[[2]] * log(updownbranch[[2]]) ) ) #
                + 100*(sum(initfreqs)-1)^2#
            )#
}
rand.initfreqs <- rexp(length(initfreqs)); rand.initfreqs <- rand.initfreqs/sum(rand.initfreqs)#
rand.selection <- rexp(1, 10000)#
initpar <- c( runif(1), 2 * runif( nmuts ) * mean(mutrates) * sum(tlen), rand.initfreqs, rand.selection,  ) # random init#
truth <- c( tlen[1]/sum(tlen), mutrates * sum(tlen), initfreqs )  # truth#
names(truth) <- c( "rel.branchlen", paste("tmut:", unlist( sapply( sapply( mutpats, lapply, paste, collapse="->" ), paste, collapse=" | " ) ) ), names(initfreqs) )#
lbs <- c( 1e-6, rep(0,nmuts), rep(1e-6,length(initfreqs)) )#
ubs <- c( 1, rep(20,nmuts), rep(1,length(initfreqs)) )#
# # do in parallel:#
# cheating.parjob <- mcparallel( optim( par=truth, fn=likfun, method="L-BFGS-B", lower=lbs, upper=ubs, control=list(trace=3,fnscale=likfun(truth)) ) ),#
# random.parjob <- mcparallel( optim( par=initpar, fn=likfun, method="L-BFGS-B", lower=lbs, upper=ubs, control=list(trace=3,fnscale=likfun(truth)) ) )#
# cheating.ans <- mccollect( cheating.parjob, wait=TRUE )#
# random.ans <- mccollect( random.parjob, wait=TRUE )#
cheating.ans <- optim( par=truth, fn=likfun, method="L-BFGS-B", lower=lbs, upper=ubs, control=list(trace=3,fnscale=abs(likfun(truth))) )#
random.ans <- optim( par=initpar, fn=likfun, method="L-BFGS-B", lower=lbs, upper=ubs, control=list(trace=3,fnscale=abs(likfun(truth))) )#
# renormalize the initial frequencies#
cheating.ans.par <- cheating.ans$par; cheating.ans.par[1+nmuts+(1:nfreqs)] <- cheating.ans.par[1+nmuts+(1:nfreqs)] / sum( cheating.ans.par[1+nmuts+(1:nfreqs)] )#
random.ans.par <- random.ans$par; random.ans.par[1+nmuts+(1:nfreqs)] <- random.ans.par[1+nmuts+(1:nfreqs)] / sum( random.ans.par[1+nmuts+(1:nfreqs)] )#
#
estimates <- data.frame( rbind(init=initpar, ans=random.ans.par, cheating=cheating.ans.par, truth=truth ) )#
colnames(estimates) <- c( "branchlen", paste("tmut:", unlist( sapply( sapply( mutpats, lapply, paste, collapse="->" ), paste, collapse=" | " ) ) ), paste("init",bases,sep='.') )#
estimates$likfun <- apply( estimates, 1, likfun )
load(infile)#
runinfo <- paste(lwin,win,rwin, sep='-')#
basedir <- gsub("RData",runinfo,infile,fixed=TRUE)#
if (!file.exists(basedir)) { dir.create(basedir) }#
basename <- paste(basedir,"/win-",lwin,"-",win,"-",rwin,sep='')#
datafile <- paste( basename ,"-results.RData",sep='')#
resultsfile <- paste( basename ,"-results.tsv",sep='')#
plotfile <- paste( basename ,"-plot",sep='')#
if (logfile=="") {#
    logfile <- gsub(".RData",".Rout",infile,fixed=TRUE)#
    logcon <- if (logfile=="-") { stdout() } else { file(paste(basedir,logfile,sep='/'),open="wt") }#
    sink(file=logcon, type="message", split=interactive()) #
    sink(file=logcon, type="output", split=interactive())   # send both to log file#
}#
#
if (file.exists(gmfile)) {#
    load(gmfile)#
} else {#
    if (meanboundary>0) {#
        genmatrix <- meangenmatrix( lwin=1, rwin=1, patlen=winlen, mutpats=mutpats, selpats=list(), mutrates=mutrates*tlen[1], selcoef=numeric(0), boundary=boundary )#
    } else {#
        genmatrix <- makegenmatrix( patlen=winlen, mutpats=mutpats, selpats=list(), mutrates=mutrates*tlen[1], selcoef=numeric(0), boundary=boundary )#
    }#
}#
projmatrix <- collapsepatmatrix( ipatterns=rownames(genmatrix), lwin=lwin, rwin=rwin )#
subtransmatrix <- computetransmatrix( genmatrix, projmatrix, names=TRUE )#
#
counts <- list(#
            "1.2"=counttrans( rownames(projmatrix), colnames(projmatrix), simseqs[[1]]$finalseq, simseqs[[2]]$finalseq, lwin=lwin ),#
            "2.1"=counttrans( rownames(projmatrix), colnames(projmatrix), simseqs[[2]]$finalseq, simseqs[[1]]$finalseq, lwin=lwin )#
        )#
# want only patterns that overlap little#
initcounts <- lapply( counts, rowSums )#
nonoverlapping <- lapply( seq_along(counts), function (k) ( leftchanged(rownames(counts[[k]]),colnames(counts[[k]]),lwin=lwin,win=win) & (initcounts[[k]]>0) ) )#
nov.counts <- lapply(seq_along(counts), function (k) counts[[k]][nonoverlapping[[k]]] )
load(infile)#
runinfo <- paste(lwin,win,rwin, sep='-')#
basedir <- gsub("RData",runinfo,infile,fixed=TRUE)#
if (!file.exists(basedir)) { dir.create(basedir) }#
basename <- paste(basedir,"/win-",lwin,"-",win,"-",rwin,sep='')#
datafile <- paste( basename ,"-results.RData",sep='')#
resultsfile <- paste( basename ,"-results.tsv",sep='')#
plotfile <- paste( basename ,"-plot",sep='')#
if (logfile=="") {#
    logfile <- gsub(".RData",".Rout",infile,fixed=TRUE)#
    logcon <- if (logfile=="-") { stdout() } else { file(paste(basedir,logfile,sep='/'),open="wt") }#
    sink(file=logcon, type="message", split=interactive()) #
    sink(file=logcon, type="output", split=interactive())   # send both to log file#
}#
#
if (file.exists(gmfile)) {#
    load(gmfile)#
} else {#
    if (meanboundary>0) {#
        genmatrix <- meangenmatrix( lwin=1, rwin=1, patlen=winlen, mutpats=mutpats, selpats=list(), mutrates=mutrates*tlen[1], selcoef=numeric(0), boundary=boundary )#
    } else {#
        genmatrix <- makegenmatrix( patlen=winlen, mutpats=mutpats, selpats=list(), mutrates=mutrates*tlen[1], selcoef=numeric(0), boundary=boundary )#
    }#
}#
projmatrix <- collapsepatmatrix( ipatterns=rownames(genmatrix), lwin=lwin, rwin=rwin )#
subtransmatrix <- computetransmatrix( genmatrix, projmatrix, names=TRUE )#
#
counts <- list(#
            "1.2"=counttrans( rownames(projmatrix), colnames(projmatrix), simseqs[[1]]$finalseq, simseqs[[2]]$finalseq, lwin=lwin ),#
            "2.1"=counttrans( rownames(projmatrix), colnames(projmatrix), simseqs[[2]]$finalseq, simseqs[[1]]$finalseq, lwin=lwin )#
        )#
# want only patterns that overlap little#
initcounts <- lapply( counts, rowSums )#
nonoverlapping <- lapply( seq_along(counts), function (k) ( leftchanged(rownames(counts[[k]]),colnames(counts[[k]]),lwin=lwin,win=win) & (initcounts[[k]]>0) ) )#
nov.counts <- lapply(seq_along(counts), function (k) counts[[k]][nonoverlapping[[k]]] )
nmuts <- length(mutpats)#
nfreqs <- length(nitfreqs)#
npats <- nrow(genmatrix)#
patcomp <- apply( do.call(rbind, strsplit(rownames(genmatrix),'') ), 2, match, bases )  # which base is at each position in each pattern#
likfun <- function (params) {#
    # params are: tlen[1]/sum(tlen), sum(tlen)*mutrates, initfreqs#
    branchlens <- c(params[1],1-params[1])#
    mutrates <- params[1+(1:nmuts)]#
    initfreqs <- params[1+nmuts+(1:nfreqs)]#
    initfreqs <- initfreqs/sum(initfreqs)#
    patfreqs <- initfreqs[patcomp]#
    sel <- params[1+nmuts+(1:nfreqs)+1]#
    dim(patfreqs) <- dim(patcomp)#
    patfreqs <- apply( patfreqs, 1, prod )#
    # these are collapsed transition matrix#
    updownbranch <- list(  # note "up" branch is from simpler summaries#
            getupdowntrans( genmatrix, projmatrix, mutrates=list(mutrates,mutrates), selcoef=list(sel,numeric(0)), initfreqs=patfreqs, tlens=rev(branchlens) ),#
            getupdowntrans( genmatrix, projmatrix, mutrates=list(mutrates,mutrates), selcoef=list(sel,numeric(0)), initfreqs=patfreqs, tlens=branchlens )#
        )#
    if (any(sapply(updownbranch,function(x) any(!is.numeric(x))|any(x<0)))) { browser() }#
    # return negative log-likelihood plus a penalty to keep initfreqs summing to (almost) 1#
    return(#
                (-1) * ( sum( counts[[1]] * log(updownbranch[[1]]) ) + sum( counts[[2]] * log(updownbranch[[2]]) ) )#
                + 100*(sum(initfreqs)-1)^2#
            )#
}
nmuts <- length(mutpats)#
nfreqs <- length(initfreqs)#
npats <- nrow(genmatrix)#
patcomp <- apply( do.call(rbind, strsplit(rownames(genmatrix),'') ), 2, match, bases )  # which base is at each position in each pattern#
likfun <- function (params) {#
    # params are: tlen[1]/sum(tlen), sum(tlen)*mutrates, initfreqs#
    branchlens <- c(params[1],1-params[1])#
    mutrates <- params[1+(1:nmuts)]#
    initfreqs <- params[1+nmuts+(1:nfreqs)]#
    initfreqs <- initfreqs/sum(initfreqs)#
    patfreqs <- initfreqs[patcomp]#
    sel <- params[1+nmuts+(1:nfreqs)+1]#
    dim(patfreqs) <- dim(patcomp)#
    patfreqs <- apply( patfreqs, 1, prod )#
    # these are collapsed transition matrix#
    updownbranch <- list(  # note "up" branch is from simpler summaries#
            getupdowntrans( genmatrix, projmatrix, mutrates=list(mutrates,mutrates), selcoef=list(sel,numeric(0)), initfreqs=patfreqs, tlens=rev(branchlens) ),#
            getupdowntrans( genmatrix, projmatrix, mutrates=list(mutrates,mutrates), selcoef=list(sel,numeric(0)), initfreqs=patfreqs, tlens=branchlens )#
        )#
    if (any(sapply(updownbranch,function(x) any(!is.numeric(x))|any(x<0)))) { browser() }#
    # return negative log-likelihood plus a penalty to keep initfreqs summing to (almost) 1#
    return(#
                (-1) * ( sum( counts[[1]] * log(updownbranch[[1]]) ) + sum( counts[[2]] * log(updownbranch[[2]]) ) )#
                + 100*(sum(initfreqs)-1)^2#
            )#
}
rand.initfreqs <- rexp(length(initfreqs)); rand.initfreqs <- rand.initfreqs/sum(rand.initfreqs)#
rand.selection <- rexp(1, 10000)#
initpar <- c( runif(1), 2 * runif( nmuts ) * mean(mutrates) * sum(tlen), rand.initfreqs, rand.selection,  ) # random init#
truth <- c( tlen[1]/sum(tlen), mutrates * sum(tlen), initfreqs )  # truth#
names(truth) <- c( "rel.branchlen", paste("tmut:", unlist( sapply( sapply( mutpats, lapply, paste, collapse="->" ), paste, collapse=" | " ) ) ), names(initfreqs) )#
lbs <- c( 1e-6, rep(0,nmuts), rep(1e-6,length(initfreqs)) )#
ubs <- c( 1, rep(20,nmuts), rep(1,length(initfreqs)) )
rand.initfreqs <- rexp(length(initfreqs)); rand.initfreqs <- rand.initfreqs/sum(rand.initfreqs)#
rand.selection <- rexp(1, 10000)#
initpar <- c( runif(1), 2 * runif( nmuts ) * mean(mutrates) * sum(tlen), rand.initfreqs, rand.selection  ) # random init#
truth <- c( tlen[1]/sum(tlen), mutrates * sum(tlen), initfreqs )  # truth#
names(truth) <- c( "rel.branchlen", paste("tmut:", unlist( sapply( sapply( mutpats, lapply, paste, collapse="->" ), paste, collapse=" | " ) ) ), names(initfreqs) )#
lbs <- c( 1e-6, rep(0,nmuts), rep(1e-6,length(initfreqs)) )#
ubs <- c( 1, rep(20,nmuts), rep(1,length(initfreqs)) )
random.ans <- optim( par=initpar, fn=likfun, method="L-BFGS-B", lower=lbs, upper=ubs, control=list(trace=3,fnscale=abs(likfun(truth))) )
selpats
seltrans
params
likfun <- function (params) {#
    # params are: tlen[1]/sum(tlen), sum(tlen)*mutrates, initfreqs#
    branchlens <- c(params[1],1-params[1])#
    mutrates <- params[1+(1:nmuts)]#
    initfreqs <- params[1+nmuts+(1:nfreqs)]#
    initfreqs <- initfreqs/sum(initfreqs)#
    patfreqs <- initfreqs[patcomp]#
    sel <- params[1+nmuts+nfreqs+1]#
    dim(patfreqs) <- dim(patcomp)#
    patfreqs <- apply( patfreqs, 1, prod )#
    # these are collapsed transition matrix#
    updownbranch <- list(  # note "up" branch is from simpler summaries#
            getupdowntrans( genmatrix, projmatrix, mutrates=list(mutrates,mutrates), selcoef=list(sel,numeric(0)), initfreqs=patfreqs, tlens=rev(branchlens) ),#
            getupdowntrans( genmatrix, projmatrix, mutrates=list(mutrates,mutrates), selcoef=list(sel,numeric(0)), initfreqs=patfreqs, tlens=branchlens )#
        )#
    if (any(sapply(updownbranch,function(x) any(!is.numeric(x))|any(x<0)))) { browser() }#
    # return negative log-likelihood plus a penalty to keep initfreqs summing to (almost) 1#
    return(#
                (-1) * ( sum( counts[[1]] * log(updownbranch[[1]]) ) + sum( counts[[2]] * log(updownbranch[[2]]) ) )#
                + 100*(sum(initfreqs)-1)^2#
            )#
}#
#
# point estimates#
rand.initfreqs <- rexp(length(initfreqs)); rand.initfreqs <- rand.initfreqs/sum(rand.initfreqs)#
rand.selection <- rexp(1, 10000)#
initpar <- c( runif(1), 2 * runif( nmuts ) * mean(mutrates) * sum(tlen), rand.initfreqs, rand.selection  ) # random init#
truth <- c( tlen[1]/sum(tlen), mutrates * sum(tlen), initfreqs )  # truth#
names(truth) <- c( "rel.branchlen", paste("tmut:", unlist( sapply( sapply( mutpats, lapply, paste, collapse="->" ), paste, collapse=" | " ) ) ), names(initfreqs) )#
lbs <- c( 1e-6, rep(0,nmuts), rep(1e-6,length(initfreqs)) )#
ubs <- c( 1, rep(20,nmuts), rep(1,length(initfreqs)) )
sel
random.ans <- optim( par=initpar, fn=likfun, method="L-BFGS-B", lower=lbs, upper=ubs, control=list(trace=3,fnscale=abs(likfun(truth))) )
seltrans
likfun <- function (params) {#
    # params are: tlen[1]/sum(tlen), sum(tlen)*mutrates, initfreqs#
    branchlens <- c(params[1],1-params[1])#
    mutrates <- params[1+(1:nmuts)]#
    initfreqs <- params[1+nmuts+(1:nfreqs)]#
    initfreqs <- initfreqs/sum(initfreqs)#
    patfreqs <- initfreqs[patcomp]#
    sel <- params[1+nmuts+nfreqs+1]#
    dim(patfreqs) <- dim(patcomp)#
    patfreqs <- apply( patfreqs, 1, prod )#
    # these are collapsed transition matrix#
    updownbranch <- list(  # note "up" branch is from simpler summaries#
            getupdowntrans( genmatrix, projmatrix, mutrates=list(mutrates,mutrates), selcoef=list(sel,popsize), initfreqs=patfreqs, tlens=rev(branchlens) ),#
            getupdowntrans( genmatrix, projmatrix, mutrates=list(mutrates,mutrates), selcoef=list(sel,popsize), initfreqs=patfreqs, tlens=branchlens )#
        )#
    if (any(sapply(updownbranch,function(x) any(!is.numeric(x))|any(x<0)))) { browser() }#
    # return negative log-likelihood plus a penalty to keep initfreqs summing to (almost) 1#
    return(#
                (-1) * ( sum( counts[[1]] * log(updownbranch[[1]]) ) + sum( counts[[2]] * log(updownbranch[[2]]) ) )#
                + 100*(sum(initfreqs)-1)^2#
            )#
}#
#
# point estimates#
rand.initfreqs <- rexp(length(initfreqs)); rand.initfreqs <- rand.initfreqs/sum(rand.initfreqs)#
rand.selection <- rexp(1, 10000)#
initpar <- c( runif(1), 2 * runif( nmuts ) * mean(mutrates) * sum(tlen), rand.initfreqs, 123  ) # random init#
truth <- c( tlen[1]/sum(tlen), mutrates * sum(tlen), initfreqs )  # truth#
names(truth) <- c( "rel.branchlen", paste("tmut:", unlist( sapply( sapply( mutpats, lapply, paste, collapse="->" ), paste, collapse=" | " ) ) ), names(initfreqs) )#
lbs <- c( 1e-6, rep(0,nmuts), rep(1e-6,length(initfreqs)) )#
ubs <- c( 1, rep(20,nmuts), rep(1,length(initfreqs)) )
random.ans <- optim( par=initpar, fn=likfun, method="L-BFGS-B", lower=lbs, upper=ubs, control=list(trace=3,fnscale=abs(likfun(truth))) )
seltrans
popsize
plot(sort(y))
plot(y)
plot(sort(x))
plot(x)
plot(z)
plot(sort(z))
?ifelse
require(optparse)#
setwd('/Users/Jessica/Documents/USC/context/sims-selection')#
usage <- "\#
Simulate from the process.\#
"#
#
option_list <- list(#
        make_option( c("-t","--tlen"), type="character", default=NULL, help="Branch length(s). [if one provided, both are equal]"),#
        make_option( c("-s","--seqlen"), type="numeric", default=NULL, help="Number of bases to simulate." ),#
        make_option( c("-m","--baserates"), type="character", default=NULL, help="Single base transition rate (or list of twelve rates for A->T A->C A->G T->C T->G C->G T->A C->A G->A C->T G->T G->C). [default indep't Uniform[0,1]]" ),#
        make_option( c("-c","--cpgrate"), type="character", default=NULL, help="Additional CpG rate. [default 20*Uniform[0,1]]"),#
        make_option( c("-g","--gcbias"), type="character", default=NULL, help="Strength of GC bias. [default 2e-4*Uniform[0,1]]"),#
        make_option( c("-n","--Ne"), type="character", default="1e4", help="Effective population sizes, in same order as branch lengths (for computing prob of fixation). [default \"%default\"]"),#
        make_option( c("-f","--initfreqs"), type="character", default="c(.25,.25,.25,.25)", help="Initial base frequencies. [default \"%default\"]"),#
        make_option( c("-o","--logfile"), type="character", default="", help="Direct output to this file. [default appends -simrun.Rout]" )#
    )#
#
# added options for, Ne, gc bias, dual mutation rates (one set for each branch)#
opt <- parse_args(OptionParser(option_list=option_list,description=usage))#
if (interactive()) { opt$tlen <- ".1"; opt$seqlen <- 150 }#
if ( (is.null(opt$tlen) | is.null(opt$seqlen)) ) { stop("Rscript sim-tree-cpg.R -h for help.") }#
if (is.null(opt$baserates)) { opt$baserates <- c(runif(12), runif(12)); names(opt$baserates) <- c("A->T", "A->C", "A->G", "T->C", "T->G", "C->G", "T->A", "C->A", "G->A", "C->T", "G->T", "G->C") }#
if (is.character(opt$baserates)) { opt$baserates <- eval(parse(text=opt$baserates)) }#
if (length(opt$baserates)==1) { opt$baserates <- rep(opt$baserates,12) }#
if (is.null(opt$cpgrate)) { opt$cpgrate <- 20*runif(2) }#
if (is.null(opt$gcbias)) { opt$gcbias <- 2e-4*runif(2) }#
opt$Ne <- eval(parse(text=opt$Ne))#
if (length(opt$Ne)==1) { opt$Ne <- rep( opt$Ne, 1e4 ) }#
opt$initfreqs <- eval(parse(text=opt$initfreqs))#
opt$tlen <- eval(parse(text=opt$tlen))#
if (length(opt$tlen)==1) { opt$tlen <- rep(opt$tlen,2) }#
attach(opt)
opt
require(optparse)#
setwd('/Users/Jessica/Documents/USC/context/sims-selection')#
usage <- "\#
Simulate from the process.\#
"#
#
option_list <- list(#
        make_option( c("-t","--tlen"), type="character", default=NULL, help="Branch length(s). [if one provided, both are equal]"),#
        make_option( c("-s","--seqlen"), type="numeric", default=NULL, help="Number of bases to simulate." ),#
        make_option( c("-m","--baserates"), type="character", default=NULL, help="Single base transition rate (or list of twelve rates for A->T A->C A->G T->C T->G C->G T->A C->A G->A C->T G->T G->C). [default indep't Uniform[0,1]]" ),#
        make_option( c("-c","--cpgrate"), type="character", default=NULL, help="Additional CpG rate. [default 20*Uniform[0,1]]"),#
        make_option( c("-g","--gcbias"), type="character", default=NULL, help="Strength of GC bias. [default 2e-4*Uniform[0,1]]"),#
        make_option( c("-n","--Ne"), type="character", default="1e4", help="Effective population sizes, in same order as branch lengths (for computing prob of fixation). [default \"%default\"]"),#
        make_option( c("-f","--initfreqs"), type="character", default="c(.25,.25,.25,.25)", help="Initial base frequencies. [default \"%default\"]"),#
        make_option( c("-o","--logfile"), type="character", default="", help="Direct output to this file. [default appends -simrun.Rout]" )#
    )#
#
# added options for, Ne, gc bias, dual mutation rates (one set for each branch)#
opt <- parse_args(OptionParser(option_list=option_list,description=usage))#
if (interactive()) { opt$tlen <- ".1"; opt$seqlen <- 150 }#
if ( (is.null(opt$tlen) | is.null(opt$seqlen)) ) { stop("Rscript sim-tree-cpg.R -h for help.") }#
if (is.null(opt$baserates)) { opt$baserates <- c(runif(12), runif(12)); names(opt$baserates) <- c("A->T", "A->C", "A->G", "T->C", "T->G", "C->G", "T->A", "C->A", "G->A", "C->T", "G->T", "G->C") }#
if (is.character(opt$baserates)) { opt$baserates <- eval(parse(text=opt$baserates)) }#
if (length(opt$baserates)==1) { opt$baserates <- rep(opt$baserates,12) }#
if (is.null(opt$cpgrate)) { opt$cpgrate <- 20*runif(2) }#
if (is.null(opt$gcbias)) { opt$gcbias <- 2e-4*runif(2) }#
opt$Ne <- eval(parse(text=opt$Ne))#
if (length(opt$Ne)==1) { opt$Ne <- rep( opt$Ne, 2 ) }#
opt$initfreqs <- eval(parse(text=opt$initfreqs))#
opt$tlen <- eval(parse(text=opt$tlen))#
if (length(opt$tlen)==1) { opt$tlen <- rep(opt$tlen,2) }#
attach(opt)
opt
require(optparse)#
setwd('/Users/Jessica/Documents/USC/context/sims-selection')#
usage <- "\#
Simulate from the process.\#
"#
#
option_list <- list(#
        make_option( c("-t","--tlen"), type="character", default="c(0.4, 0.6)", help="Branch length(s). [if one provided, both are equal]"),#
        make_option( c("-s","--seqlen"), type="numeric", default="1000", help="Number of bases to simulate." ),#
        make_option( c("-m","--baserates"), type="character", default=NULL, help="Single base transition rate (or list of twelve rates for A->T A->C A->G T->C T->G C->G T->A C->A G->A C->T G->T G->C). [default indep't Uniform[0,1]]" ),#
        make_option( c("-c","--cpgrate"), type="character", default=NULL, help="Additional CpG rate. [default 20*Uniform[0,1]]"),#
        make_option( c("-g","--gcbias"), type="character", default=NULL, help="Strength of GC bias. [default 2e-4*Uniform[0,1]]"),#
        make_option( c("-n","--Ne"), type="character", default="1e4", help="Effective population sizes, in same order as branch lengths (for computing prob of fixation). [default \"%default\"]"),#
        make_option( c("-f","--initfreqs"), type="character", default="c(.25,.25,.25,.25)", help="Initial base frequencies. [default \"%default\"]"),#
        make_option( c("-o","--logfile"), type="character", default="", help="Direct output to this file. [default appends -simrun.Rout]" )#
    )#
#
# added options for, Ne, gc bias, dual mutation rates (one set for each branch)#
opt <- parse_args(OptionParser(option_list=option_list,description=usage))#
if (interactive()) { opt$tlen <- ".1"; opt$seqlen <- 150 }#
if ( (is.null(opt$tlen) | is.null(opt$seqlen)) ) { stop("Rscript sim-tree-cpg.R -h for help.") }#
if (is.null(opt$baserates)) { opt$baserates <- c(runif(12), runif(12)); names(opt$baserates) <- c("A->T", "A->C", "A->G", "T->C", "T->G", "C->G", "T->A", "C->A", "G->A", "C->T", "G->T", "G->C") }#
if (is.character(opt$baserates)) { opt$baserates <- eval(parse(text=opt$baserates)) }#
if (length(opt$baserates)==1) { opt$baserates <- rep(opt$baserates,12) }#
if (is.null(opt$cpgrate)) { opt$cpgrate <- 20*runif(2) }#
if (is.null(opt$gcbias)) { opt$gcbias <- 2e-4*runif(2) }#
opt$Ne <- eval(parse(text=opt$Ne))#
if (length(opt$Ne)==1) { opt$Ne <- rep( opt$Ne, 2 ) }#
opt$initfreqs <- eval(parse(text=opt$initfreqs))#
opt$tlen <- eval(parse(text=opt$tlen))#
if (length(opt$tlen)==1) { opt$tlen <- rep(opt$tlen,2) }#
attach(opt)
opt
opt <- parse_args(OptionParser(option_list=option_list,description=usage))#
if (interactive()) { opt$tlen <- ".1"; opt$seqlen <- 150 }#
if ( (is.null(opt$tlen) | is.null(opt$seqlen)) ) { stop("Rscript sim-tree-cpg.R -h for help.") }#
if (is.null(opt$baserates)) { opt$baserates <- c(runif(12), runif(12)); names(opt$baserates) <- rep(c("A->T", "A->C", "A->G", "T->C", "T->G", "C->G", "T->A", "C->A", "G->A", "C->T", "G->T", "G->C"), 2) }#
if (is.character(opt$baserates)) { opt$baserates <- eval(parse(text=opt$baserates)) }#
if (length(opt$baserates)==1) { opt$baserates <- rep(opt$baserates,12) }#
if (is.null(opt$cpgrate)) { opt$cpgrate <- 20*runif(2) }#
if (is.null(opt$gcbias)) { opt$gcbias <- 2e-4*runif(2) }#
opt$Ne <- eval(parse(text=opt$Ne))#
if (length(opt$Ne)==1) { opt$Ne <- rep( opt$Ne, 2 ) }#
opt$initfreqs <- eval(parse(text=opt$initfreqs))#
opt$tlen <- eval(parse(text=opt$tlen))#
if (length(opt$tlen)==1) { opt$tlen <- rep(opt$tlen,2) }#
attach(opt)
opt
> option_list <- list(#
+         make_option( c("-t","--tlen"), type="character", default="0.4, 0.6", help="Branch length(s). [if one provided, both are equal]"),#
+         make_option( c("-s","--seqlen"), type="numeric", default="1000", help="Number of bases to simulate." ),#
+         make_option( c("-m","--baserates"), type="character", default=NULL, help="Single base transition rate (or list of twelve rates for A->T A->C A->G T->C T->G C->G T->A C->A G->A C->T G->T G->C). [default indep't Uniform[0,1]]" ),#
+         make_option( c("-c","--cpgrate"), type="character", default=NULL, help="Additional CpG rate. [default 20*Uniform[0,1]]")#
+         make_option( c("-g","--gcbias"), type="character", default=NULL, help="Strength of GC bias. [default 2e-4*Uniform[0,1]]"),#
+         make_option( c("-n","--Ne"), type="character", default="3e4, 1e4", help="Effective population sizes, in same order as branch lengths (for computing prob of fixation). [default \"%default\"]"),#
+         make_option( c("-f","--initfreqs"), type="character", default="c(.25,.25,.25,.25)", help="Initial base frequencies. [default \"%default\"]"),#
+         make_option( c("-o","--logfile"), type="character", default="", help="Direct output to this file. [default appends -simrun.Rout]" )#
+     )
option_list <- list(#
        make_option( c("-t","--tlen"), type="character", default="c(0.4, 0.6)", help="Branch length(s). [if one provided, both are equal]"),#
        make_option( c("-s","--seqlen"), type="numeric", default="1000", help="Number of bases to simulate." ),#
        make_option( c("-m","--baserates"), type="character", default=NULL, help="Single base transition rate (or list of twelve rates for A->T A->C A->G T->C T->G C->G T->A C->A G->A C->T G->T G->C). [default indep't Uniform[0,1]]" ),#
        make_option( c("-c","--cpgrate"), type="character", default=NULL, help="Additional CpG rate. [default 20*Uniform[0,1]]"),#
        make_option( c("-g","--gcbias"), type="character", default=NULL, help="Strength of GC bias. [default 2e-4*Uniform[0,1]]"),#
        make_option( c("-n","--Ne"), type="character", default="c(3e4, 1e4)", help="Effective population sizes, in same order as branch lengths (for computing prob of fixation). [default \"%default\"]"),#
        make_option( c("-f","--initfreqs"), type="character", default="c(.25,.25,.25,.25)", help="Initial base frequencies. [default \"%default\"]"),#
        make_option( c("-o","--logfile"), type="character", default="", help="Direct output to this file. [default appends -simrun.Rout]" )#
    )
opt <- parse_args(OptionParser(option_list=option_list,description=usage))#
if (interactive()) { opt$tlen <- ".1"; opt$seqlen <- 150 }#
if ( (is.null(opt$tlen) | is.null(opt$seqlen)) ) { stop("Rscript sim-tree-cpg.R -h for help.") }#
if (is.null(opt$baserates)) { opt$baserates <- c(runif(12), runif(12)); names(opt$baserates) <- rep(c("A->T", "A->C", "A->G", "T->C", "T->G", "C->G", "T->A", "C->A", "G->A", "C->T", "G->T", "G->C"), 2) }#
if (is.character(opt$baserates)) { opt$baserates <- eval(parse(text=opt$baserates)) }#
if (length(opt$baserates)==1) { opt$baserates <- rep(opt$baserates,12) }#
if (is.null(opt$cpgrate)) { opt$cpgrate <- 20*runif(2) }#
if (is.null(opt$gcbias)) { opt$gcbias <- 2e-4*runif(2) }#
opt$Ne <- eval(parse(text=opt$Ne))#
if (length(opt$Ne)==1) { opt$Ne <- rep( opt$Ne, 2 ) }#
opt$initfreqs <- eval(parse(text=opt$initfreqs))#
opt$tlen <- eval(parse(text=opt$tlen))#
if (length(opt$tlen)==1) { opt$tlen <- rep(opt$tlen,2) }#
attach(opt)
opt
option_list <- list(#
        make_option( c("-t","--tlen"), type="character", default="c(0.4, 0.6)", help="Branch length(s). [if one provided, both are equal]"),#
        make_option( c("-s","--seqlen"), type="numeric", default=1000, help="Number of bases to simulate." ),#
        make_option( c("-m","--baserates"), type="character", default=NULL, help="Single base transition rate (or list of twelve rates for A->T A->C A->G T->C T->G C->G T->A C->A G->A C->T G->T G->C). [default indep't Uniform[0,1]]" ),#
        make_option( c("-c","--cpgrate"), type="character", default=NULL, help="Additional CpG rate. [default 20*Uniform[0,1]]"),#
        make_option( c("-g","--gcbias"), type="character", default=NULL, help="Strength of GC bias. [default 2e-4*Uniform[0,1]]"),#
        make_option( c("-n","--Ne"), type="character", default="c(3e4, 1e4)", help="Effective population sizes, in same order as branch lengths (for computing prob of fixation). [default \"%default\"]"),#
        make_option( c("-f","--initfreqs"), type="character", default="c(.25,.25,.25,.25)", help="Initial base frequencies. [default \"%default\"]"),#
        make_option( c("-o","--logfile"), type="character", default="", help="Direct output to this file. [default appends -simrun.Rout]" )#
    )
opt <- parse_args(OptionParser(option_list=option_list,description=usage))#
if (interactive()) { opt$tlen <- ".1"; opt$seqlen <- 150 }#
if ( (is.null(opt$tlen) | is.null(opt$seqlen)) ) { stop("Rscript sim-tree-cpg.R -h for help.") }#
if (is.null(opt$baserates)) { opt$baserates <- c(runif(12), runif(12)); names(opt$baserates) <- rep(c("A->T", "A->C", "A->G", "T->C", "T->G", "C->G", "T->A", "C->A", "G->A", "C->T", "G->T", "G->C"), 2) }#
if (is.character(opt$baserates)) { opt$baserates <- eval(parse(text=opt$baserates)) }#
if (length(opt$baserates)==1) { opt$baserates <- rep(opt$baserates,12) }#
if (is.null(opt$cpgrate)) { opt$cpgrate <- 20*runif(2) }#
if (is.null(opt$gcbias)) { opt$gcbias <- 2e-4*runif(2) }#
opt$Ne <- eval(parse(text=opt$Ne))#
if (length(opt$Ne)==1) { opt$Ne <- rep( opt$Ne, 2 ) }#
opt$initfreqs <- eval(parse(text=opt$initfreqs))#
opt$tlen <- eval(parse(text=opt$tlen))#
if (length(opt$tlen)==1) { opt$tlen <- rep(opt$tlen,2) }#
attach(opt)
opt
